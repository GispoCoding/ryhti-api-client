# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.plan_recommendation import PlanRecommendation
from ryhti_api_client.models.plan_regulation import PlanRegulation
from typing import Optional, Set
from typing_extensions import Self

class PlanRegulationGroup(BaseModel):
    """
    Kaavamääräysryhmä
    """ # noqa: E501
    plan_regulation_group_key: StrictStr = Field(description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus", alias="planRegulationGroupKey")
    plan_regulation_group_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/planregulationgroup/{guid})", alias="planRegulationGroupUri")
    title_of_plan_regulation: LanguageString = Field(description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.", alias="titleOfPlanRegulation")
    letter_identifier: Optional[StrictStr] = Field(default=None, description="KirjainTunnus", alias="letterIdentifier")
    plan_regulations: List[PlanRegulation] = Field(description="Kaavamääräykset", alias="planRegulations")
    plan_recommendations: Optional[List[PlanRecommendation]] = Field(default=None, description="Kaavasuositukset", alias="planRecommendations")
    color_number: Optional[StrictStr] = Field(default=None, description="Värikoodi", alias="colorNumber")
    group_number: Optional[StrictInt] = Field(default=None, description="Ryhmänumero", alias="groupNumber")
    __properties: ClassVar[List[str]] = ["planRegulationGroupKey", "planRegulationGroupUri", "titleOfPlanRegulation", "letterIdentifier", "planRegulations", "planRecommendations", "colorNumber", "groupNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanRegulationGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "plan_regulation_group_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of title_of_plan_regulation
        if self.title_of_plan_regulation:
            _dict['titleOfPlanRegulation'] = self.title_of_plan_regulation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plan_regulations (list)
        _items = []
        if self.plan_regulations:
            for _item_plan_regulations in self.plan_regulations:
                if _item_plan_regulations:
                    _items.append(_item_plan_regulations.to_dict())
            _dict['planRegulations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_recommendations (list)
        _items = []
        if self.plan_recommendations:
            for _item_plan_recommendations in self.plan_recommendations:
                if _item_plan_recommendations:
                    _items.append(_item_plan_recommendations.to_dict())
            _dict['planRecommendations'] = _items
        # set to None if letter_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.letter_identifier is None and "letter_identifier" in self.model_fields_set:
            _dict['letterIdentifier'] = None

        # set to None if plan_recommendations (nullable) is None
        # and model_fields_set contains the field
        if self.plan_recommendations is None and "plan_recommendations" in self.model_fields_set:
            _dict['planRecommendations'] = None

        # set to None if color_number (nullable) is None
        # and model_fields_set contains the field
        if self.color_number is None and "color_number" in self.model_fields_set:
            _dict['colorNumber'] = None

        # set to None if group_number (nullable) is None
        # and model_fields_set contains the field
        if self.group_number is None and "group_number" in self.model_fields_set:
            _dict['groupNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanRegulationGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planRegulationGroupKey": obj.get("planRegulationGroupKey"),
            "planRegulationGroupUri": obj.get("planRegulationGroupUri"),
            "titleOfPlanRegulation": LanguageString.from_dict(obj["titleOfPlanRegulation"]) if obj.get("titleOfPlanRegulation") is not None else None,
            "letterIdentifier": obj.get("letterIdentifier"),
            "planRegulations": [PlanRegulation.from_dict(_item) for _item in obj["planRegulations"]] if obj.get("planRegulations") is not None else None,
            "planRecommendations": [PlanRecommendation.from_dict(_item) for _item in obj["planRecommendations"]] if obj.get("planRecommendations") is not None else None,
            "colorNumber": obj.get("colorNumber"),
            "groupNumber": obj.get("groupNumber")
        })
        return _obj



# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from ryhti_api_client.models.ryhti_geometry_geometry import RyhtiGeometryGeometry
from typing import Optional, Set
from typing_extensions import Self


class RyhtiGeometry(BaseModel):
    """
    RyhtiGeometry
    """  # noqa: E501

    srid: StrictStr = Field(
        description="Gauss Krüger projektio; SRID koodi; SRID nimi       19;3873;ETRS89 / GK19FIN EPSG:3873       20;3874;ETRS89 / GK20FIN EPSG:3874       21;3875;ETRS89 / GK21FIN EPSG:3875       22;3876;ETRS89 / GK22FIN EPSG:3876       23;3877;ETRS89 / GK23FIN EPSG:3877       24;3878;ETRS89 / GK24FIN EPSG:3878       25;3879;ETRS89 / GK25FIN EPSG:3879       26;3880;ETRS89 / GK26FIN EPSG:3880       27;3881;ETRS89 / GK27FIN EPSG:3881       28;3882;ETRS89 / GK28FIN EPSG:3882       29;3883;ETRS89 / GK29FIN EPSG:3883       30;3884;ETRS89 / GK30FIN EPSG:3884       31;3885;ETRS89 / GK31FIN EPSG:3885       3067 TM35FIN  "
    )
    geometry: RyhtiGeometryGeometry
    __properties: ClassVar[List[str]] = ["srid", "geometry"]

    @field_validator("srid")
    def srid_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "3067",
                "3873",
                "3874",
                "3875",
                "3876",
                "3877",
                "3878",
                "3879",
                "3880",
                "3881",
                "3882",
                "3883",
                "3884",
                "3885",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('3067', '3873', '3874', '3875', '3876', '3877', '3878', '3879', '3880', '3881', '3882', '3883', '3884', '3885')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RyhtiGeometry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict["geometry"] = self.geometry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RyhtiGeometry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "srid": obj.get("srid"),
                "geometry": RyhtiGeometryGeometry.from_dict(obj["geometry"])
                if obj.get("geometry") is not None
                else None,
            }
        )
        return _obj

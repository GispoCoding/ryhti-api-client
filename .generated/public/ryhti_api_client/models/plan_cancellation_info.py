# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.cancelled_group_relations import CancelledGroupRelations
from typing import Optional, Set
from typing_extensions import Self

class PlanCancellationInfo(BaseModel):
    """
    Kaavan kumoamistieto
    """ # noqa: E501
    plan_cancellation_info_key: StrictStr = Field(description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus", alias="planCancellationInfoKey")
    plan_cancellation_info_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/plancancellationinfo/{guid})", alias="planCancellationInfoUri")
    cancelled_plan_uri: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Kumottavan hyväkstytyn kaavan tunnus URI-muodossa (https://uri.rakennetunymparistontietojarjestelma.fi/plan/{planKey})", alias="cancelledPlanUri")
    cancels_entire_plan: StrictBool = Field(description="Kumoaa kaavan kokonaan", alias="cancelsEntirePlan")
    cancelled_plan_object_uris: Optional[List[StrictStr]] = Field(default=None, description="Kumottavan kaavakohteen tunnukset URI-muodossa (https://uri.rakennetunymparistontietojarjestelma.fi/planobject/{planObjectKey})", alias="cancelledPlanObjectUris")
    cancelled_regulation_uris: Optional[List[StrictStr]] = Field(default=None, description="Kumottavan määräyksen tunnukset URI-muodossa (https://uri.rakennetunymparistontietojarjestelma.fi/planregulation/{planRegulationKey})", alias="cancelledRegulationUris")
    cancelled_recommendation_uris: Optional[List[StrictStr]] = Field(default=None, description="Kumottavan suosituksen tunnukset URI-muodossa (https://uri.rakennetunymparistontietojarjestelma.fi/planrecommendation/{planRecommendationKey})", alias="cancelledRecommendationUris")
    cancelled_group_relations: Optional[List[CancelledGroupRelations]] = Field(default=None, description="Kumottavan ryhmän kohdistus. Kuvaa kaavakohteesta kumoutuvat kaavamääräysryhmät.", alias="cancelledGroupRelations")
    __properties: ClassVar[List[str]] = ["planCancellationInfoKey", "planCancellationInfoUri", "cancelledPlanUri", "cancelsEntirePlan", "cancelledPlanObjectUris", "cancelledRegulationUris", "cancelledRecommendationUris", "cancelledGroupRelations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanCancellationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "plan_cancellation_info_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cancelled_group_relations (list)
        _items = []
        if self.cancelled_group_relations:
            for _item_cancelled_group_relations in self.cancelled_group_relations:
                if _item_cancelled_group_relations:
                    _items.append(_item_cancelled_group_relations.to_dict())
            _dict['cancelledGroupRelations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanCancellationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planCancellationInfoKey": obj.get("planCancellationInfoKey"),
            "planCancellationInfoUri": obj.get("planCancellationInfoUri"),
            "cancelledPlanUri": obj.get("cancelledPlanUri"),
            "cancelsEntirePlan": obj.get("cancelsEntirePlan"),
            "cancelledPlanObjectUris": obj.get("cancelledPlanObjectUris"),
            "cancelledRegulationUris": obj.get("cancelledRegulationUris"),
            "cancelledRecommendationUris": obj.get("cancelledRecommendationUris"),
            "cancelledGroupRelations": [CancelledGroupRelations.from_dict(_item) for _item in obj["cancelledGroupRelations"]] if obj.get("cancelledGroupRelations") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.decimal_range import DecimalRange
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from ryhti_api_client.models.time_period_date_only import TimePeriodDateOnly
from typing import Optional, Set
from typing_extensions import Self

class PlanObject(BaseModel):
    """
    Kaavakohde
    """ # noqa: E501
    plan_object_key: StrictStr = Field(description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus", alias="planObjectKey")
    plan_object_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/planobject/{guid})", alias="planObjectUri")
    life_cycle_status: StrictStr = Field(description="Kaavakohteen elinkaaren tila. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/kaavaelinkaari\">http://uri.suomi.fi/codelist/rytj/kaavaelinkaari</a>", alias="lifeCycleStatus")
    underground_status: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Luokittelu maanalaista ja maanpäällistä maankäyttöä koskeviin kaavakohteisiin. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/RY_MaanalaisuudenLaji\">http://uri.suomi.fi/codelist/rytj/RY_MaanalaisuudenLaji</a>", alias="undergroundStatus")
    geometry: RyhtiGeometry = Field(description="Geometria")
    name: Optional[LanguageString] = Field(default=None, description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.")
    description: Optional[LanguageString] = Field(default=None, description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.")
    vertical_limit: Optional[DecimalRange] = Field(default=None, description="Desimaaliarvoväli", alias="verticalLimit")
    related_plan_source_data_keys: Optional[List[StrictStr]] = Field(default=None, description="Viittaus (GUID) kaavan mukana toimitettavaan lähtötietoaineistoon sisältyvään tietokohteeseen, joka liittyy kaavakohteeseen. Esim. Pohjavesialue.  Päivitysvaiheessa tämän listan kuuluu olla tyhjä.", alias="relatedPlanSourceDataKeys")
    related_plan_source_data_uris: Optional[List[StrictStr]] = Field(default=None, description="Viittaus (URI) kaava-asian mukana toimitettavaan, aiemmin tallennettuun, lähtötietoaineistoon sisältyvään tietokohteeseen, joka liittyy tallennettuun kaavakohteeseen. Esim. Pohjavesialue.", alias="relatedPlanSourceDataUris")
    period_of_validity: Optional[TimePeriodDateOnly] = Field(default=None, description="VoimassaoloAika", alias="periodOfValidity")
    object_number: Optional[StrictInt] = Field(default=None, description="Kohdenumero", alias="objectNumber")
    related_plan_object_keys: Optional[List[StrictStr]] = Field(default=None, description="LiittyväKohde UUID/localID", alias="relatedPlanObjectKeys")
    __properties: ClassVar[List[str]] = ["planObjectKey", "planObjectUri", "lifeCycleStatus", "undergroundStatus", "geometry", "name", "description", "verticalLimit", "relatedPlanSourceDataKeys", "relatedPlanSourceDataUris", "periodOfValidity", "objectNumber", "relatedPlanObjectKeys"]

    @field_validator('life_cycle_status')
    def life_cycle_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17']):
            raise ValueError("must be one of enum values ('http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "plan_object_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vertical_limit
        if self.vertical_limit:
            _dict['verticalLimit'] = self.vertical_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict['periodOfValidity'] = self.period_of_validity.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if vertical_limit (nullable) is None
        # and model_fields_set contains the field
        if self.vertical_limit is None and "vertical_limit" in self.model_fields_set:
            _dict['verticalLimit'] = None

        # set to None if related_plan_source_data_keys (nullable) is None
        # and model_fields_set contains the field
        if self.related_plan_source_data_keys is None and "related_plan_source_data_keys" in self.model_fields_set:
            _dict['relatedPlanSourceDataKeys'] = None

        # set to None if related_plan_source_data_uris (nullable) is None
        # and model_fields_set contains the field
        if self.related_plan_source_data_uris is None and "related_plan_source_data_uris" in self.model_fields_set:
            _dict['relatedPlanSourceDataUris'] = None

        # set to None if period_of_validity (nullable) is None
        # and model_fields_set contains the field
        if self.period_of_validity is None and "period_of_validity" in self.model_fields_set:
            _dict['periodOfValidity'] = None

        # set to None if object_number (nullable) is None
        # and model_fields_set contains the field
        if self.object_number is None and "object_number" in self.model_fields_set:
            _dict['objectNumber'] = None

        # set to None if related_plan_object_keys (nullable) is None
        # and model_fields_set contains the field
        if self.related_plan_object_keys is None and "related_plan_object_keys" in self.model_fields_set:
            _dict['relatedPlanObjectKeys'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planObjectKey": obj.get("planObjectKey"),
            "planObjectUri": obj.get("planObjectUri"),
            "lifeCycleStatus": obj.get("lifeCycleStatus"),
            "undergroundStatus": obj.get("undergroundStatus"),
            "geometry": RyhtiGeometry.from_dict(obj["geometry"]) if obj.get("geometry") is not None else None,
            "name": LanguageString.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "description": LanguageString.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "verticalLimit": DecimalRange.from_dict(obj["verticalLimit"]) if obj.get("verticalLimit") is not None else None,
            "relatedPlanSourceDataKeys": obj.get("relatedPlanSourceDataKeys"),
            "relatedPlanSourceDataUris": obj.get("relatedPlanSourceDataUris"),
            "periodOfValidity": TimePeriodDateOnly.from_dict(obj["periodOfValidity"]) if obj.get("periodOfValidity") is not None else None,
            "objectNumber": obj.get("objectNumber"),
            "relatedPlanObjectKeys": obj.get("relatedPlanObjectKeys")
        })
        return _obj



# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from ryhti_api_client.models.code_value import CodeValue
from ryhti_api_client.models.decimal_range import DecimalRange
from ryhti_api_client.models.decimal_value import DecimalValue
from ryhti_api_client.models.identifier_value import IdentifierValue
from ryhti_api_client.models.localized_text_value import LocalizedTextValue
from ryhti_api_client.models.numeric_range import NumericRange
from ryhti_api_client.models.numeric_value import NumericValue
from ryhti_api_client.models.positive_decimal_range import PositiveDecimalRange
from ryhti_api_client.models.positive_decimal_value import PositiveDecimalValue
from ryhti_api_client.models.positive_numeric_range import PositiveNumericRange
from ryhti_api_client.models.positive_numeric_value import PositiveNumericValue
from ryhti_api_client.models.spot_elevation import SpotElevation
from ryhti_api_client.models.text_value import TextValue
from ryhti_api_client.models.time_period_date_only_value import TimePeriodDateOnlyValue
from ryhti_api_client.models.time_period_value import TimePeriodValue
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDITIONALINFORMATIONVALUE_ONE_OF_SCHEMAS = ["CodeValue", "DecimalRange", "DecimalValue", "IdentifierValue", "LocalizedTextValue", "NumericRange", "NumericValue", "PositiveDecimalRange", "PositiveDecimalValue", "PositiveNumericRange", "PositiveNumericValue", "SpotElevation", "TextValue", "TimePeriodDateOnlyValue", "TimePeriodValue"]

class AdditionalInformationValue(BaseModel):
    """
    Arvo
    """
    # data type: CodeValue
    oneof_schema_1_validator: Optional[CodeValue] = None
    # data type: NumericValue
    oneof_schema_2_validator: Optional[NumericValue] = None
    # data type: NumericRange
    oneof_schema_3_validator: Optional[NumericRange] = None
    # data type: PositiveNumericValue
    oneof_schema_4_validator: Optional[PositiveNumericValue] = None
    # data type: PositiveNumericRange
    oneof_schema_5_validator: Optional[PositiveNumericRange] = None
    # data type: DecimalValue
    oneof_schema_6_validator: Optional[DecimalValue] = None
    # data type: DecimalRange
    oneof_schema_7_validator: Optional[DecimalRange] = None
    # data type: PositiveDecimalValue
    oneof_schema_8_validator: Optional[PositiveDecimalValue] = None
    # data type: PositiveDecimalRange
    oneof_schema_9_validator: Optional[PositiveDecimalRange] = None
    # data type: SpotElevation
    oneof_schema_10_validator: Optional[SpotElevation] = None
    # data type: IdentifierValue
    oneof_schema_11_validator: Optional[IdentifierValue] = None
    # data type: LocalizedTextValue
    oneof_schema_12_validator: Optional[LocalizedTextValue] = None
    # data type: TextValue
    oneof_schema_13_validator: Optional[TextValue] = None
    # data type: TimePeriodValue
    oneof_schema_14_validator: Optional[TimePeriodValue] = None
    # data type: TimePeriodDateOnlyValue
    oneof_schema_15_validator: Optional[TimePeriodDateOnlyValue] = None
    actual_instance: Optional[Union[CodeValue, DecimalRange, DecimalValue, IdentifierValue, LocalizedTextValue, NumericRange, NumericValue, PositiveDecimalRange, PositiveDecimalValue, PositiveNumericRange, PositiveNumericValue, SpotElevation, TextValue, TimePeriodDateOnlyValue, TimePeriodValue]] = None
    one_of_schemas: Set[str] = { "CodeValue", "DecimalRange", "DecimalValue", "IdentifierValue", "LocalizedTextValue", "NumericRange", "NumericValue", "PositiveDecimalRange", "PositiveDecimalValue", "PositiveNumericRange", "PositiveNumericValue", "SpotElevation", "TextValue", "TimePeriodDateOnlyValue", "TimePeriodValue" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        if v is None:
            return v

        instance = AdditionalInformationValue.model_construct()
        error_messages = []
        match = 0
        # validate data type: CodeValue
        if not isinstance(v, CodeValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeValue`")
        else:
            match += 1
        # validate data type: NumericValue
        if not isinstance(v, NumericValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumericValue`")
        else:
            match += 1
        # validate data type: NumericRange
        if not isinstance(v, NumericRange):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumericRange`")
        else:
            match += 1
        # validate data type: PositiveNumericValue
        if not isinstance(v, PositiveNumericValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PositiveNumericValue`")
        else:
            match += 1
        # validate data type: PositiveNumericRange
        if not isinstance(v, PositiveNumericRange):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PositiveNumericRange`")
        else:
            match += 1
        # validate data type: DecimalValue
        if not isinstance(v, DecimalValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DecimalValue`")
        else:
            match += 1
        # validate data type: DecimalRange
        if not isinstance(v, DecimalRange):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DecimalRange`")
        else:
            match += 1
        # validate data type: PositiveDecimalValue
        if not isinstance(v, PositiveDecimalValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PositiveDecimalValue`")
        else:
            match += 1
        # validate data type: PositiveDecimalRange
        if not isinstance(v, PositiveDecimalRange):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PositiveDecimalRange`")
        else:
            match += 1
        # validate data type: SpotElevation
        if not isinstance(v, SpotElevation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SpotElevation`")
        else:
            match += 1
        # validate data type: IdentifierValue
        if not isinstance(v, IdentifierValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentifierValue`")
        else:
            match += 1
        # validate data type: LocalizedTextValue
        if not isinstance(v, LocalizedTextValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LocalizedTextValue`")
        else:
            match += 1
        # validate data type: TextValue
        if not isinstance(v, TextValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextValue`")
        else:
            match += 1
        # validate data type: TimePeriodValue
        if not isinstance(v, TimePeriodValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimePeriodValue`")
        else:
            match += 1
        # validate data type: TimePeriodDateOnlyValue
        if not isinstance(v, TimePeriodDateOnlyValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimePeriodDateOnlyValue`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AdditionalInformationValue with oneOf schemas: CodeValue, DecimalRange, DecimalValue, IdentifierValue, LocalizedTextValue, NumericRange, NumericValue, PositiveDecimalRange, PositiveDecimalValue, PositiveNumericRange, PositiveNumericValue, SpotElevation, TextValue, TimePeriodDateOnlyValue, TimePeriodValue. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AdditionalInformationValue with oneOf schemas: CodeValue, DecimalRange, DecimalValue, IdentifierValue, LocalizedTextValue, NumericRange, NumericValue, PositiveDecimalRange, PositiveDecimalValue, PositiveNumericRange, PositiveNumericValue, SpotElevation, TextValue, TimePeriodDateOnlyValue, TimePeriodValue. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: Optional[str]) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        if json_str is None:
            return instance

        error_messages = []
        match = 0

        # deserialize data into CodeValue
        try:
            instance.actual_instance = CodeValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumericValue
        try:
            instance.actual_instance = NumericValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumericRange
        try:
            instance.actual_instance = NumericRange.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PositiveNumericValue
        try:
            instance.actual_instance = PositiveNumericValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PositiveNumericRange
        try:
            instance.actual_instance = PositiveNumericRange.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DecimalValue
        try:
            instance.actual_instance = DecimalValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DecimalRange
        try:
            instance.actual_instance = DecimalRange.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PositiveDecimalValue
        try:
            instance.actual_instance = PositiveDecimalValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PositiveDecimalRange
        try:
            instance.actual_instance = PositiveDecimalRange.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SpotElevation
        try:
            instance.actual_instance = SpotElevation.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentifierValue
        try:
            instance.actual_instance = IdentifierValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LocalizedTextValue
        try:
            instance.actual_instance = LocalizedTextValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextValue
        try:
            instance.actual_instance = TextValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimePeriodValue
        try:
            instance.actual_instance = TimePeriodValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimePeriodDateOnlyValue
        try:
            instance.actual_instance = TimePeriodDateOnlyValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AdditionalInformationValue with oneOf schemas: CodeValue, DecimalRange, DecimalValue, IdentifierValue, LocalizedTextValue, NumericRange, NumericValue, PositiveDecimalRange, PositiveDecimalValue, PositiveNumericRange, PositiveNumericValue, SpotElevation, TextValue, TimePeriodDateOnlyValue, TimePeriodValue. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AdditionalInformationValue with oneOf schemas: CodeValue, DecimalRange, DecimalValue, IdentifierValue, LocalizedTextValue, NumericRange, NumericValue, PositiveDecimalRange, PositiveDecimalValue, PositiveNumericRange, PositiveNumericValue, SpotElevation, TextValue, TimePeriodDateOnlyValue, TimePeriodValue. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CodeValue, DecimalRange, DecimalValue, IdentifierValue, LocalizedTextValue, NumericRange, NumericValue, PositiveDecimalRange, PositiveDecimalValue, PositiveNumericRange, PositiveNumericValue, SpotElevation, TextValue, TimePeriodDateOnlyValue, TimePeriodValue]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



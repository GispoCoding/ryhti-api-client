# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BindingPlotDivisionOperator(BaseModel):
    """
    Toimija
    """ # noqa: E501
    binding_plot_division_operator_key: StrictStr = Field(description="Toimijan avain", alias="bindingPlotDivisionOperatorKey")
    binding_plot_division_operator_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/bindingplotdivisionoperator/{guid})", alias="bindingPlotDivisionOperatorUri")
    first_name: Optional[StrictStr] = Field(default=None, description="Etunimi", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Sukunimi", alias="lastName")
    title: Optional[StrictStr] = Field(default=None, description="Nimike")
    organization_name: Optional[StrictStr] = Field(default=None, description="Organisaation nimi", alias="organizationName")
    business_id: Optional[StrictStr] = Field(default=None, description="Y-tunnus", alias="businessId")
    __properties: ClassVar[List[str]] = ["bindingPlotDivisionOperatorKey", "bindingPlotDivisionOperatorUri", "firstName", "lastName", "title", "organizationName", "businessId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BindingPlotDivisionOperator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "binding_plot_division_operator_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.organization_name is None and "organization_name" in self.model_fields_set:
            _dict['organizationName'] = None

        # set to None if business_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_id is None and "business_id" in self.model_fields_set:
            _dict['businessId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BindingPlotDivisionOperator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bindingPlotDivisionOperatorKey": obj.get("bindingPlotDivisionOperatorKey"),
            "bindingPlotDivisionOperatorUri": obj.get("bindingPlotDivisionOperatorUri"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "title": obj.get("title"),
            "organizationName": obj.get("organizationName"),
            "businessId": obj.get("businessId")
        })
        return _obj



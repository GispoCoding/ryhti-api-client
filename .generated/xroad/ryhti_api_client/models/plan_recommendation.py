# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.plan_attachment_document import PlanAttachmentDocument
from ryhti_api_client.models.time_period_date_only import TimePeriodDateOnly
from typing import Set
from typing_extensions import Self


class PlanRecommendation(BaseModel):
    """
    Kaavasuositus
    """  # noqa: E501

    plan_recommendation_key: StrictStr = Field(
        description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus",
        alias="planRecommendationKey",
    )
    plan_recommendation_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/planrecommendation/{guid})",
        alias="planRecommendationUri",
    )
    value: LanguageString = Field(
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli."
    )
    life_cycle_status: StrictStr = Field(
        description='Kaavasuosituksen elinkaaren tila. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/kaavaelinkaari">http://uri.suomi.fi/codelist/rytj/kaavaelinkaari</a>',
        alias="lifeCycleStatus",
    )
    related_documents: Optional[List[PlanAttachmentDocument]] = Field(
        default=None, description="LiittyväAsiakirja", alias="relatedDocuments"
    )
    plan_themes: Optional[List[StrictStr]] = Field(
        default=None,
        description='Kaavasuosituksen teemoittelu. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/kaavoitusteema">http://uri.suomi.fi/codelist/rytj/kaavoitusteema</a>',
        alias="planThemes",
    )
    period_of_validity: Optional[TimePeriodDateOnly] = Field(
        default=None, description="VoimassaoloAika", alias="periodOfValidity"
    )
    recommendation_number: Optional[StrictInt] = Field(
        default=None, description="Suositusnumero", alias="recommendationNumber"
    )
    __properties: ClassVar[List[str]] = [
        "planRecommendationKey",
        "planRecommendationUri",
        "value",
        "lifeCycleStatus",
        "relatedDocuments",
        "planThemes",
        "periodOfValidity",
        "recommendationNumber",
    ]

    @field_validator("life_cycle_status")
    def life_cycle_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "plan_recommendation_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict["value"] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in related_documents (list)
        _items = []
        if self.related_documents:
            for _item_related_documents in self.related_documents:
                if _item_related_documents:
                    _items.append(_item_related_documents.to_dict())
            _dict["relatedDocuments"] = _items
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict["periodOfValidity"] = self.period_of_validity.to_dict()
        # set to None if related_documents (nullable) is None
        # and model_fields_set contains the field
        if (
            self.related_documents is None
            and "related_documents" in self.model_fields_set
        ):
            _dict["relatedDocuments"] = None

        # set to None if plan_themes (nullable) is None
        # and model_fields_set contains the field
        if self.plan_themes is None and "plan_themes" in self.model_fields_set:
            _dict["planThemes"] = None

        # set to None if period_of_validity (nullable) is None
        # and model_fields_set contains the field
        if (
            self.period_of_validity is None
            and "period_of_validity" in self.model_fields_set
        ):
            _dict["periodOfValidity"] = None

        # set to None if recommendation_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.recommendation_number is None
            and "recommendation_number" in self.model_fields_set
        ):
            _dict["recommendationNumber"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "planRecommendationKey": obj.get("planRecommendationKey"),
                "planRecommendationUri": obj.get("planRecommendationUri"),
                "value": LanguageString.from_dict(obj["value"])
                if obj.get("value") is not None
                else None,
                "lifeCycleStatus": obj.get("lifeCycleStatus"),
                "relatedDocuments": [
                    PlanAttachmentDocument.from_dict(_item)
                    for _item in obj["relatedDocuments"]
                ]
                if obj.get("relatedDocuments") is not None
                else None,
                "planThemes": obj.get("planThemes"),
                "periodOfValidity": TimePeriodDateOnly.from_dict(
                    obj["periodOfValidity"]
                )
                if obj.get("periodOfValidity") is not None
                else None,
                "recommendationNumber": obj.get("recommendationNumber"),
            }
        )
        return _obj

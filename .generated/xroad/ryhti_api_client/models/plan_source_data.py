# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.plan_attachment_document import PlanAttachmentDocument
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from typing import Set
from typing_extensions import Self


class PlanSourceData(BaseModel):
    """
    Lähtötietoaineisto
    """  # noqa: E501

    plan_source_data_key: StrictStr = Field(
        description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus",
        alias="planSourceDataKey",
    )
    plan_source_data_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/plansourcedata/{guid})",
        alias="planSourceDataUri",
    )
    type: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description='Aineiston tyyppi. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/RY_LahtotietoaineistonLaji">http://uri.suomi.fi/codelist/rytj/RY_LahtotietoaineistonLaji</a>'
    )
    name: Optional[LanguageString] = Field(
        default=None,
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.",
    )
    geographical_area: Optional[RyhtiGeometry] = Field(
        default=None, description="Aluerajaus", alias="geographicalArea"
    )
    additional_information_link: Optional[StrictStr] = Field(
        default=None, alias="additionalInformationLink"
    )
    files: Optional[List[PlanAttachmentDocument]] = None
    __properties: ClassVar[List[str]] = [
        "planSourceDataKey",
        "planSourceDataUri",
        "type",
        "name",
        "geographicalArea",
        "additionalInformationLink",
        "files",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanSourceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "plan_source_data_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geographical_area
        if self.geographical_area:
            _dict["geographicalArea"] = self.geographical_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict["files"] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if geographical_area (nullable) is None
        # and model_fields_set contains the field
        if (
            self.geographical_area is None
            and "geographical_area" in self.model_fields_set
        ):
            _dict["geographicalArea"] = None

        # set to None if additional_information_link (nullable) is None
        # and model_fields_set contains the field
        if (
            self.additional_information_link is None
            and "additional_information_link" in self.model_fields_set
        ):
            _dict["additionalInformationLink"] = None

        # set to None if files (nullable) is None
        # and model_fields_set contains the field
        if self.files is None and "files" in self.model_fields_set:
            _dict["files"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanSourceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "planSourceDataKey": obj.get("planSourceDataKey"),
                "planSourceDataUri": obj.get("planSourceDataUri"),
                "type": obj.get("type"),
                "name": LanguageString.from_dict(obj["name"])
                if obj.get("name") is not None
                else None,
                "geographicalArea": RyhtiGeometry.from_dict(obj["geographicalArea"])
                if obj.get("geographicalArea") is not None
                else None,
                "additionalInformationLink": obj.get("additionalInformationLink"),
                "files": [
                    PlanAttachmentDocument.from_dict(_item) for _item in obj["files"]
                ]
                if obj.get("files") is not None
                else None,
            }
        )
        return _obj

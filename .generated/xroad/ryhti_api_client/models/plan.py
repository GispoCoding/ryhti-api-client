# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.general_regulation_group import GeneralRegulationGroup
from ryhti_api_client.models.other_plan_material import OtherPlanMaterial
from ryhti_api_client.models.plan_attachment_document import PlanAttachmentDocument
from ryhti_api_client.models.plan_cancellation_info import PlanCancellationInfo
from ryhti_api_client.models.plan_map import PlanMap
from ryhti_api_client.models.plan_object import PlanObject
from ryhti_api_client.models.plan_operator import PlanOperator
from ryhti_api_client.models.plan_regulation_group import PlanRegulationGroup
from ryhti_api_client.models.plan_regulation_group_relations import PlanRegulationGroupRelations
from ryhti_api_client.models.plan_report import PlanReport
from ryhti_api_client.models.presentation_alignment import PresentationAlignment
from ryhti_api_client.models.related_plan_object_regulation_group_relation import RelatedPlanObjectRegulationGroupRelation
from ryhti_api_client.models.related_regulation_group_plan_object_relation import RelatedRegulationGroupPlanObjectRelation
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from ryhti_api_client.models.time_period_date_only import TimePeriodDateOnly
from typing import Optional, Set
from typing_extensions import Self

class Plan(BaseModel):
    """
    Kaava
    """ # noqa: E501
    plan_key: StrictStr = Field(description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus", alias="planKey")
    plan_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/plan/{guid})", alias="planUri")
    life_cycle_status: StrictStr = Field(description="Kaavan elinkaaren tila. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/kaavaelinkaari\">http://uri.suomi.fi/codelist/rytj/kaavaelinkaari</a>", alias="lifeCycleStatus")
    legal_effect_of_local_master_plans: Optional[List[StrictStr]] = Field(default=None, description="Yleiskaavan oikeusvaikutteisuuden määritykset. Käytössä ainoastaan yleiskaavan yhteydessä. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK\">http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK</a>", alias="legalEffectOfLocalMasterPlans")
    scale: Optional[StrictInt] = Field(default=None, description="Mittakaava")
    official_use_only: Optional[StrictBool] = Field(default=None, description="Vain viranomaiskäyttöön", alias="officialUseOnly")
    plan_maps: Optional[List[PlanMap]] = Field(default=None, description="Kaavakartat", alias="planMaps")
    geographical_area: RyhtiGeometry = Field(description="Aluerajaus", alias="geographicalArea")
    plan_description: Optional[StrictStr] = Field(default=None, description="Kaavan kuvaus", alias="planDescription")
    plan_annexes: Optional[List[PlanAttachmentDocument]] = Field(default=None, description="Kaavan liittet", alias="planAnnexes")
    other_plan_materials: Optional[List[OtherPlanMaterial]] = Field(default=None, description="Muu kaava-aineisto", alias="otherPlanMaterials")
    plan_cancellation_infos: Optional[List[PlanCancellationInfo]] = Field(default=None, description="Kumoamistieto", alias="planCancellationInfos")
    plan_report: Optional[PlanReport] = Field(default=None, description="Kaavaselostus", alias="planReport")
    general_regulation_groups: Optional[List[GeneralRegulationGroup]] = Field(default=None, description="Kaavamääräysryhmät", alias="generalRegulationGroups")
    presentation_alignments: Optional[List[PresentationAlignment]] = Field(default=None, description="Esitystavankohdistus", alias="presentationAlignments")
    period_of_validity: Optional[TimePeriodDateOnly] = Field(default=None, description="Voimassaoloaika", alias="periodOfValidity")
    approval_date: Optional[date] = Field(default=None, description="Hyväksymispäivämäärä", alias="approvalDate")
    planners: Optional[List[PlanOperator]] = Field(default=None, description="Laatija")
    plan_objects: Optional[List[PlanObject]] = Field(default=None, description="Kaavakohteet", alias="planObjects")
    plan_regulation_groups: Optional[List[PlanRegulationGroup]] = Field(default=None, description="Kaavakohteen määräysryhmät", alias="planRegulationGroups")
    plan_regulation_group_relations: Optional[List[PlanRegulationGroupRelations]] = Field(default=None, description="Kaavakohteen ja määräysryhmän väliset suhteet", alias="planRegulationGroupRelations")
    related_plan_object_regulation_group_relations: Optional[List[RelatedPlanObjectRegulationGroupRelation]] = Field(default=None, description="Ulkoisten kaavakohteiden ja sisäisten määräysryhmien relaatiot", alias="relatedPlanObjectRegulationGroupRelations")
    related_regulation_group_plan_object_relations: Optional[List[RelatedRegulationGroupPlanObjectRelation]] = Field(default=None, description="Ulkoisten määräysryhmien ja sisäisten kaavakohteiden relaatiot (vain get kutsuissa)", alias="relatedRegulationGroupPlanObjectRelations")
    __properties: ClassVar[List[str]] = ["planKey", "planUri", "lifeCycleStatus", "legalEffectOfLocalMasterPlans", "scale", "officialUseOnly", "planMaps", "geographicalArea", "planDescription", "planAnnexes", "otherPlanMaterials", "planCancellationInfos", "planReport", "generalRegulationGroups", "presentationAlignments", "periodOfValidity", "approvalDate", "planners", "planObjects", "planRegulationGroups", "planRegulationGroupRelations", "relatedPlanObjectRegulationGroupRelations", "relatedRegulationGroupPlanObjectRelations"]

    @field_validator('life_cycle_status')
    def life_cycle_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17']):
            raise ValueError("must be one of enum values ('http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17')")
        return value

    @field_validator('legal_effect_of_local_master_plans')
    def legal_effect_of_local_master_plans_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/1', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/11', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/12', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/13', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/2']):
                raise ValueError("each list item must be one of ('http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/1', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/11', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/12', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/13', 'http://uri.suomi.fi/codelist/rytj/oikeusvaik_YK/code/2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Plan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "plan_uri",
            "related_regulation_group_plan_object_relations",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in plan_maps (list)
        _items = []
        if self.plan_maps:
            for _item_plan_maps in self.plan_maps:
                if _item_plan_maps:
                    _items.append(_item_plan_maps.to_dict())
            _dict['planMaps'] = _items
        # override the default output from pydantic by calling `to_dict()` of geographical_area
        if self.geographical_area:
            _dict['geographicalArea'] = self.geographical_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plan_annexes (list)
        _items = []
        if self.plan_annexes:
            for _item_plan_annexes in self.plan_annexes:
                if _item_plan_annexes:
                    _items.append(_item_plan_annexes.to_dict())
            _dict['planAnnexes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in other_plan_materials (list)
        _items = []
        if self.other_plan_materials:
            for _item_other_plan_materials in self.other_plan_materials:
                if _item_other_plan_materials:
                    _items.append(_item_other_plan_materials.to_dict())
            _dict['otherPlanMaterials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_cancellation_infos (list)
        _items = []
        if self.plan_cancellation_infos:
            for _item_plan_cancellation_infos in self.plan_cancellation_infos:
                if _item_plan_cancellation_infos:
                    _items.append(_item_plan_cancellation_infos.to_dict())
            _dict['planCancellationInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan_report
        if self.plan_report:
            _dict['planReport'] = self.plan_report.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in general_regulation_groups (list)
        _items = []
        if self.general_regulation_groups:
            for _item_general_regulation_groups in self.general_regulation_groups:
                if _item_general_regulation_groups:
                    _items.append(_item_general_regulation_groups.to_dict())
            _dict['generalRegulationGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in presentation_alignments (list)
        _items = []
        if self.presentation_alignments:
            for _item_presentation_alignments in self.presentation_alignments:
                if _item_presentation_alignments:
                    _items.append(_item_presentation_alignments.to_dict())
            _dict['presentationAlignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict['periodOfValidity'] = self.period_of_validity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in planners (list)
        _items = []
        if self.planners:
            for _item_planners in self.planners:
                if _item_planners:
                    _items.append(_item_planners.to_dict())
            _dict['planners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_objects (list)
        _items = []
        if self.plan_objects:
            for _item_plan_objects in self.plan_objects:
                if _item_plan_objects:
                    _items.append(_item_plan_objects.to_dict())
            _dict['planObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_regulation_groups (list)
        _items = []
        if self.plan_regulation_groups:
            for _item_plan_regulation_groups in self.plan_regulation_groups:
                if _item_plan_regulation_groups:
                    _items.append(_item_plan_regulation_groups.to_dict())
            _dict['planRegulationGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_regulation_group_relations (list)
        _items = []
        if self.plan_regulation_group_relations:
            for _item_plan_regulation_group_relations in self.plan_regulation_group_relations:
                if _item_plan_regulation_group_relations:
                    _items.append(_item_plan_regulation_group_relations.to_dict())
            _dict['planRegulationGroupRelations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_plan_object_regulation_group_relations (list)
        _items = []
        if self.related_plan_object_regulation_group_relations:
            for _item_related_plan_object_regulation_group_relations in self.related_plan_object_regulation_group_relations:
                if _item_related_plan_object_regulation_group_relations:
                    _items.append(_item_related_plan_object_regulation_group_relations.to_dict())
            _dict['relatedPlanObjectRegulationGroupRelations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_regulation_group_plan_object_relations (list)
        _items = []
        if self.related_regulation_group_plan_object_relations:
            for _item_related_regulation_group_plan_object_relations in self.related_regulation_group_plan_object_relations:
                if _item_related_regulation_group_plan_object_relations:
                    _items.append(_item_related_regulation_group_plan_object_relations.to_dict())
            _dict['relatedRegulationGroupPlanObjectRelations'] = _items
        # set to None if legal_effect_of_local_master_plans (nullable) is None
        # and model_fields_set contains the field
        if self.legal_effect_of_local_master_plans is None and "legal_effect_of_local_master_plans" in self.model_fields_set:
            _dict['legalEffectOfLocalMasterPlans'] = None

        # set to None if scale (nullable) is None
        # and model_fields_set contains the field
        if self.scale is None and "scale" in self.model_fields_set:
            _dict['scale'] = None

        # set to None if official_use_only (nullable) is None
        # and model_fields_set contains the field
        if self.official_use_only is None and "official_use_only" in self.model_fields_set:
            _dict['officialUseOnly'] = None

        # set to None if plan_maps (nullable) is None
        # and model_fields_set contains the field
        if self.plan_maps is None and "plan_maps" in self.model_fields_set:
            _dict['planMaps'] = None

        # set to None if plan_description (nullable) is None
        # and model_fields_set contains the field
        if self.plan_description is None and "plan_description" in self.model_fields_set:
            _dict['planDescription'] = None

        # set to None if plan_annexes (nullable) is None
        # and model_fields_set contains the field
        if self.plan_annexes is None and "plan_annexes" in self.model_fields_set:
            _dict['planAnnexes'] = None

        # set to None if other_plan_materials (nullable) is None
        # and model_fields_set contains the field
        if self.other_plan_materials is None and "other_plan_materials" in self.model_fields_set:
            _dict['otherPlanMaterials'] = None

        # set to None if plan_cancellation_infos (nullable) is None
        # and model_fields_set contains the field
        if self.plan_cancellation_infos is None and "plan_cancellation_infos" in self.model_fields_set:
            _dict['planCancellationInfos'] = None

        # set to None if plan_report (nullable) is None
        # and model_fields_set contains the field
        if self.plan_report is None and "plan_report" in self.model_fields_set:
            _dict['planReport'] = None

        # set to None if general_regulation_groups (nullable) is None
        # and model_fields_set contains the field
        if self.general_regulation_groups is None and "general_regulation_groups" in self.model_fields_set:
            _dict['generalRegulationGroups'] = None

        # set to None if presentation_alignments (nullable) is None
        # and model_fields_set contains the field
        if self.presentation_alignments is None and "presentation_alignments" in self.model_fields_set:
            _dict['presentationAlignments'] = None

        # set to None if period_of_validity (nullable) is None
        # and model_fields_set contains the field
        if self.period_of_validity is None and "period_of_validity" in self.model_fields_set:
            _dict['periodOfValidity'] = None

        # set to None if approval_date (nullable) is None
        # and model_fields_set contains the field
        if self.approval_date is None and "approval_date" in self.model_fields_set:
            _dict['approvalDate'] = None

        # set to None if planners (nullable) is None
        # and model_fields_set contains the field
        if self.planners is None and "planners" in self.model_fields_set:
            _dict['planners'] = None

        # set to None if plan_objects (nullable) is None
        # and model_fields_set contains the field
        if self.plan_objects is None and "plan_objects" in self.model_fields_set:
            _dict['planObjects'] = None

        # set to None if plan_regulation_groups (nullable) is None
        # and model_fields_set contains the field
        if self.plan_regulation_groups is None and "plan_regulation_groups" in self.model_fields_set:
            _dict['planRegulationGroups'] = None

        # set to None if plan_regulation_group_relations (nullable) is None
        # and model_fields_set contains the field
        if self.plan_regulation_group_relations is None and "plan_regulation_group_relations" in self.model_fields_set:
            _dict['planRegulationGroupRelations'] = None

        # set to None if related_plan_object_regulation_group_relations (nullable) is None
        # and model_fields_set contains the field
        if self.related_plan_object_regulation_group_relations is None and "related_plan_object_regulation_group_relations" in self.model_fields_set:
            _dict['relatedPlanObjectRegulationGroupRelations'] = None

        # set to None if related_regulation_group_plan_object_relations (nullable) is None
        # and model_fields_set contains the field
        if self.related_regulation_group_plan_object_relations is None and "related_regulation_group_plan_object_relations" in self.model_fields_set:
            _dict['relatedRegulationGroupPlanObjectRelations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Plan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planKey": obj.get("planKey"),
            "planUri": obj.get("planUri"),
            "lifeCycleStatus": obj.get("lifeCycleStatus"),
            "legalEffectOfLocalMasterPlans": obj.get("legalEffectOfLocalMasterPlans"),
            "scale": obj.get("scale"),
            "officialUseOnly": obj.get("officialUseOnly"),
            "planMaps": [PlanMap.from_dict(_item) for _item in obj["planMaps"]] if obj.get("planMaps") is not None else None,
            "geographicalArea": RyhtiGeometry.from_dict(obj["geographicalArea"]) if obj.get("geographicalArea") is not None else None,
            "planDescription": obj.get("planDescription"),
            "planAnnexes": [PlanAttachmentDocument.from_dict(_item) for _item in obj["planAnnexes"]] if obj.get("planAnnexes") is not None else None,
            "otherPlanMaterials": [OtherPlanMaterial.from_dict(_item) for _item in obj["otherPlanMaterials"]] if obj.get("otherPlanMaterials") is not None else None,
            "planCancellationInfos": [PlanCancellationInfo.from_dict(_item) for _item in obj["planCancellationInfos"]] if obj.get("planCancellationInfos") is not None else None,
            "planReport": PlanReport.from_dict(obj["planReport"]) if obj.get("planReport") is not None else None,
            "generalRegulationGroups": [GeneralRegulationGroup.from_dict(_item) for _item in obj["generalRegulationGroups"]] if obj.get("generalRegulationGroups") is not None else None,
            "presentationAlignments": [PresentationAlignment.from_dict(_item) for _item in obj["presentationAlignments"]] if obj.get("presentationAlignments") is not None else None,
            "periodOfValidity": TimePeriodDateOnly.from_dict(obj["periodOfValidity"]) if obj.get("periodOfValidity") is not None else None,
            "approvalDate": obj.get("approvalDate"),
            "planners": [PlanOperator.from_dict(_item) for _item in obj["planners"]] if obj.get("planners") is not None else None,
            "planObjects": [PlanObject.from_dict(_item) for _item in obj["planObjects"]] if obj.get("planObjects") is not None else None,
            "planRegulationGroups": [PlanRegulationGroup.from_dict(_item) for _item in obj["planRegulationGroups"]] if obj.get("planRegulationGroups") is not None else None,
            "planRegulationGroupRelations": [PlanRegulationGroupRelations.from_dict(_item) for _item in obj["planRegulationGroupRelations"]] if obj.get("planRegulationGroupRelations") is not None else None,
            "relatedPlanObjectRegulationGroupRelations": [RelatedPlanObjectRegulationGroupRelation.from_dict(_item) for _item in obj["relatedPlanObjectRegulationGroupRelations"]] if obj.get("relatedPlanObjectRegulationGroupRelations") is not None else None,
            "relatedRegulationGroupPlanObjectRelations": [RelatedRegulationGroupPlanObjectRelation.from_dict(_item) for _item in obj["relatedRegulationGroupPlanObjectRelations"]] if obj.get("relatedRegulationGroupPlanObjectRelations") is not None else None
        })
        return _obj



# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.land_use_restriction_handling_event import (
    LandUseRestrictionHandlingEvent,
)
from ryhti_api_client.models.land_use_restriction_matter_decision import (
    LandUseRestrictionMatterDecision,
)
from typing import Set
from typing_extensions import Self


class LandUseRestrictionMatterPhase(BaseModel):
    """
    LandUseRestrictionMatterPhase
    """  # noqa: E501

    land_use_restriction_matter_phase_key: StrictStr = Field(
        description="Avain", alias="landUseRestrictionMatterPhaseKey"
    )
    land_use_restriction_matter_phase_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/landuserestrictionmatterphase/{guid})",
        alias="landUseRestrictionMatterPhaseUri",
    )
    life_cycle_status: StrictStr = Field(
        description='Elinkaaritila. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila">http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila</a>',
        alias="lifeCycleStatus",
    )
    handling_event: LandUseRestrictionHandlingEvent = Field(
        description="Käsittelytapahtuma", alias="handlingEvent"
    )
    decision: LandUseRestrictionMatterDecision = Field(description="Päätös")
    __properties: ClassVar[List[str]] = [
        "landUseRestrictionMatterPhaseKey",
        "landUseRestrictionMatterPhaseUri",
        "lifeCycleStatus",
        "handlingEvent",
        "decision",
    ]

    @field_validator("life_cycle_status")
    def life_cycle_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila/code/01",
                "http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila/code/02",
                "http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila/code/03",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila/code/01', 'http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila/code/02', 'http://uri.suomi.fi/codelist/rytj/alueidenkaytonRajoituksenElinkaarenTila/code/03')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LandUseRestrictionMatterPhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "land_use_restriction_matter_phase_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of handling_event
        if self.handling_event:
            _dict["handlingEvent"] = self.handling_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decision
        if self.decision:
            _dict["decision"] = self.decision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LandUseRestrictionMatterPhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "landUseRestrictionMatterPhaseKey": obj.get(
                    "landUseRestrictionMatterPhaseKey"
                ),
                "landUseRestrictionMatterPhaseUri": obj.get(
                    "landUseRestrictionMatterPhaseUri"
                ),
                "lifeCycleStatus": obj.get("lifeCycleStatus"),
                "handlingEvent": LandUseRestrictionHandlingEvent.from_dict(
                    obj["handlingEvent"]
                )
                if obj.get("handlingEvent") is not None
                else None,
                "decision": LandUseRestrictionMatterDecision.from_dict(obj["decision"])
                if obj.get("decision") is not None
                else None,
            }
        )
        return _obj

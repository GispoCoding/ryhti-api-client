# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.related_plan import RelatedPlan
from typing import Set
from typing_extensions import Self


class RelatedPlotDivisionPlot(BaseModel):
    """
    LiittyväTonttijakotontti
    """  # noqa: E501

    reference_uri: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="Viittaustunnus (https://uri.rakennetunymparistontietojarjestelma.fi/plotdivisionplot/{plotdivisionplotkey}) sitovassa tonttijaossa osoitettuun tonttijakotonttiin.",
        alias="referenceUri",
    )
    related_plans: Annotated[List[RelatedPlan], Field(min_length=1)] = Field(
        description="Tonttijakotontin alueelle kohdistuvan vaikuttavan kaavan pysyvä kaavatunnus",
        alias="relatedPlans",
    )
    area_reservation_regulation_uris: Optional[List[StrictStr]] = Field(
        default=None,
        description="Viittaustunnus (https://uri.rakennetunymparistontietojarjestelma.fi/planregulation/{planregulationkey}) kaavassa osoitettuun aluevarauksen kaavamääräykseen.",
        alias="areaReservationRegulationUris",
    )
    volume_of_building_regulation_uris: Optional[List[StrictStr]] = Field(
        default=None,
        description="Viittaustunnus (https://uri.rakennetunymparistontietojarjestelma.fi/planregulation/{planregulationkey}) kaavassa osoitettuun rakentamisen määrän kaavamääräykseen.",
        alias="volumeOfBuildingRegulationUris",
    )
    __properties: ClassVar[List[str]] = [
        "referenceUri",
        "relatedPlans",
        "areaReservationRegulationUris",
        "volumeOfBuildingRegulationUris",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelatedPlotDivisionPlot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in related_plans (list)
        _items = []
        if self.related_plans:
            for _item_related_plans in self.related_plans:
                if _item_related_plans:
                    _items.append(_item_related_plans.to_dict())
            _dict["relatedPlans"] = _items
        # set to None if area_reservation_regulation_uris (nullable) is None
        # and model_fields_set contains the field
        if (
            self.area_reservation_regulation_uris is None
            and "area_reservation_regulation_uris" in self.model_fields_set
        ):
            _dict["areaReservationRegulationUris"] = None

        # set to None if volume_of_building_regulation_uris (nullable) is None
        # and model_fields_set contains the field
        if (
            self.volume_of_building_regulation_uris is None
            and "volume_of_building_regulation_uris" in self.model_fields_set
        ):
            _dict["volumeOfBuildingRegulationUris"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelatedPlotDivisionPlot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "referenceUri": obj.get("referenceUri"),
                "relatedPlans": [
                    RelatedPlan.from_dict(_item) for _item in obj["relatedPlans"]
                ]
                if obj.get("relatedPlans") is not None
                else None,
                "areaReservationRegulationUris": obj.get(
                    "areaReservationRegulationUris"
                ),
                "volumeOfBuildingRegulationUris": obj.get(
                    "volumeOfBuildingRegulationUris"
                ),
            }
        )
        return _obj

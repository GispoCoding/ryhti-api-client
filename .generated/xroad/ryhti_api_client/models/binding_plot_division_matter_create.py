# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.binding_plot_division_attachment_document import (
    BindingPlotDivisionAttachmentDocument,
)
from ryhti_api_client.models.binding_plot_division_matter_phase import (
    BindingPlotDivisionMatterPhase,
)
from ryhti_api_client.models.binding_plot_division_operator import (
    BindingPlotDivisionOperator,
)
from ryhti_api_client.models.language_string import LanguageString
from typing import Set
from typing_extensions import Self


class BindingPlotDivisionMatterCreate(BaseModel):
    """
    BindingPlotDivisionMatterCreate
    """  # noqa: E501

    name: LanguageString = Field(
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli."
    )
    description: Optional[LanguageString] = Field(
        default=None,
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.",
    )
    binding_plot_division_type: StrictStr = Field(
        description='Sitovan tonttijaon laji. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonLaji">http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonLaji</a>',
        alias="bindingPlotDivisionType",
    )
    permanent_binding_plot_division_identifier: Annotated[
        str, Field(min_length=1, strict=True)
    ] = Field(
        description="sitovan tonttijaon pysyvä tunnus",
        alias="permanentBindingPlotDivisionIdentifier",
    )
    producer_binding_plot_division_identifier: Optional[StrictStr] = Field(
        default=None,
        description="kunnan antama sitovan tonttijaon tunnus",
        alias="producerBindingPlotDivisionIdentifier",
    )
    case_identifiers: Optional[List[StrictStr]] = Field(
        default=None, description="asianhallintatunnukset", alias="caseIdentifiers"
    )
    record_numbers: Optional[List[StrictStr]] = Field(
        default=None, description="diaarinumerot", alias="recordNumbers"
    )
    time_of_initiation: date = Field(
        description="vireilletulopäivämäärä", alias="timeOfInitiation"
    )
    administrative_area_identifiers: Annotated[List[StrictStr], Field(max_length=1)] = (
        Field(
            description="hallinnollisen alueen tunnukset",
            alias="administrativeAreaIdentifiers",
        )
    )
    responsible_party: Optional[BindingPlotDivisionOperator] = Field(
        default=None, description="Vastuutaho", alias="responsibleParty"
    )
    related_binding_plot_division_matters: Optional[List[StrictStr]] = Field(
        default=None,
        description="Liittyvät asiat",
        alias="relatedBindingPlotDivisionMatters",
    )
    matter_annexes: Optional[List[BindingPlotDivisionAttachmentDocument]] = Field(
        default=None, description="AsianLiitteet", alias="matterAnnexes"
    )
    phases: Annotated[
        List[BindingPlotDivisionMatterPhase], Field(min_length=1, max_length=1)
    ] = Field(description="Vaiheet")
    original_administrative_area_identifiers: Optional[List[StrictStr]] = Field(
        default=None, alias="originalAdministrativeAreaIdentifiers"
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "bindingPlotDivisionType",
        "permanentBindingPlotDivisionIdentifier",
        "producerBindingPlotDivisionIdentifier",
        "caseIdentifiers",
        "recordNumbers",
        "timeOfInitiation",
        "administrativeAreaIdentifiers",
        "responsibleParty",
        "relatedBindingPlotDivisionMatters",
        "matterAnnexes",
        "phases",
        "originalAdministrativeAreaIdentifiers",
    ]

    @field_validator("binding_plot_division_type")
    def binding_plot_division_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonLaji/code/01",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonLaji/code/02",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonLaji/code/01', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonLaji/code/02')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BindingPlotDivisionMatterCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict["description"] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsible_party
        if self.responsible_party:
            _dict["responsibleParty"] = self.responsible_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in matter_annexes (list)
        _items = []
        if self.matter_annexes:
            for _item_matter_annexes in self.matter_annexes:
                if _item_matter_annexes:
                    _items.append(_item_matter_annexes.to_dict())
            _dict["matterAnnexes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phases (list)
        _items = []
        if self.phases:
            for _item_phases in self.phases:
                if _item_phases:
                    _items.append(_item_phases.to_dict())
            _dict["phases"] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if producer_binding_plot_division_identifier (nullable) is None
        # and model_fields_set contains the field
        if (
            self.producer_binding_plot_division_identifier is None
            and "producer_binding_plot_division_identifier" in self.model_fields_set
        ):
            _dict["producerBindingPlotDivisionIdentifier"] = None

        # set to None if case_identifiers (nullable) is None
        # and model_fields_set contains the field
        if (
            self.case_identifiers is None
            and "case_identifiers" in self.model_fields_set
        ):
            _dict["caseIdentifiers"] = None

        # set to None if record_numbers (nullable) is None
        # and model_fields_set contains the field
        if self.record_numbers is None and "record_numbers" in self.model_fields_set:
            _dict["recordNumbers"] = None

        # set to None if responsible_party (nullable) is None
        # and model_fields_set contains the field
        if (
            self.responsible_party is None
            and "responsible_party" in self.model_fields_set
        ):
            _dict["responsibleParty"] = None

        # set to None if related_binding_plot_division_matters (nullable) is None
        # and model_fields_set contains the field
        if (
            self.related_binding_plot_division_matters is None
            and "related_binding_plot_division_matters" in self.model_fields_set
        ):
            _dict["relatedBindingPlotDivisionMatters"] = None

        # set to None if matter_annexes (nullable) is None
        # and model_fields_set contains the field
        if self.matter_annexes is None and "matter_annexes" in self.model_fields_set:
            _dict["matterAnnexes"] = None

        # set to None if original_administrative_area_identifiers (nullable) is None
        # and model_fields_set contains the field
        if (
            self.original_administrative_area_identifiers is None
            and "original_administrative_area_identifiers" in self.model_fields_set
        ):
            _dict["originalAdministrativeAreaIdentifiers"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BindingPlotDivisionMatterCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": LanguageString.from_dict(obj["name"])
                if obj.get("name") is not None
                else None,
                "description": LanguageString.from_dict(obj["description"])
                if obj.get("description") is not None
                else None,
                "bindingPlotDivisionType": obj.get("bindingPlotDivisionType"),
                "permanentBindingPlotDivisionIdentifier": obj.get(
                    "permanentBindingPlotDivisionIdentifier"
                ),
                "producerBindingPlotDivisionIdentifier": obj.get(
                    "producerBindingPlotDivisionIdentifier"
                ),
                "caseIdentifiers": obj.get("caseIdentifiers"),
                "recordNumbers": obj.get("recordNumbers"),
                "timeOfInitiation": obj.get("timeOfInitiation"),
                "administrativeAreaIdentifiers": obj.get(
                    "administrativeAreaIdentifiers"
                ),
                "responsibleParty": BindingPlotDivisionOperator.from_dict(
                    obj["responsibleParty"]
                )
                if obj.get("responsibleParty") is not None
                else None,
                "relatedBindingPlotDivisionMatters": obj.get(
                    "relatedBindingPlotDivisionMatters"
                ),
                "matterAnnexes": [
                    BindingPlotDivisionAttachmentDocument.from_dict(_item)
                    for _item in obj["matterAnnexes"]
                ]
                if obj.get("matterAnnexes") is not None
                else None,
                "phases": [
                    BindingPlotDivisionMatterPhase.from_dict(_item)
                    for _item in obj["phases"]
                ]
                if obj.get("phases") is not None
                else None,
                "originalAdministrativeAreaIdentifiers": obj.get(
                    "originalAdministrativeAreaIdentifiers"
                ),
            }
        )
        return _obj

# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, ValidationError, field_validator
from typing import Any, Optional
from ryhti_api_client.models.geo_json_line_string_geometry import (
    GeoJsonLineStringGeometry,
)
from ryhti_api_client.models.geo_json_multi_line_string_geometry import (
    GeoJsonMultiLineStringGeometry,
)
from ryhti_api_client.models.geo_json_multi_point_geometry import (
    GeoJsonMultiPointGeometry,
)
from ryhti_api_client.models.geo_json_multi_polygon_geometry import (
    GeoJsonMultiPolygonGeometry,
)
from ryhti_api_client.models.geo_json_point_geometry import GeoJsonPointGeometry
from ryhti_api_client.models.geo_json_polygon_geometry import GeoJsonPolygonGeometry
from typing import Union, Set, Dict
from typing_extensions import Self

RYHTIGEOMETRYGEOMETRY_ONE_OF_SCHEMAS = [
    "GeoJsonLineStringGeometry",
    "GeoJsonMultiLineStringGeometry",
    "GeoJsonMultiPointGeometry",
    "GeoJsonMultiPolygonGeometry",
    "GeoJsonPointGeometry",
    "GeoJsonPolygonGeometry",
]


class RyhtiGeometryGeometry(BaseModel):
    """
    Geometria GeoJson rakenteella: https://geojson.org/
    """

    # data type: GeoJsonPointGeometry
    oneof_schema_1_validator: Optional[GeoJsonPointGeometry] = None
    # data type: GeoJsonMultiPointGeometry
    oneof_schema_2_validator: Optional[GeoJsonMultiPointGeometry] = None
    # data type: GeoJsonLineStringGeometry
    oneof_schema_3_validator: Optional[GeoJsonLineStringGeometry] = None
    # data type: GeoJsonMultiLineStringGeometry
    oneof_schema_4_validator: Optional[GeoJsonMultiLineStringGeometry] = None
    # data type: GeoJsonPolygonGeometry
    oneof_schema_5_validator: Optional[GeoJsonPolygonGeometry] = None
    # data type: GeoJsonMultiPolygonGeometry
    oneof_schema_6_validator: Optional[GeoJsonMultiPolygonGeometry] = None
    actual_instance: Optional[
        Union[
            GeoJsonLineStringGeometry,
            GeoJsonMultiLineStringGeometry,
            GeoJsonMultiPointGeometry,
            GeoJsonMultiPolygonGeometry,
            GeoJsonPointGeometry,
            GeoJsonPolygonGeometry,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "GeoJsonLineStringGeometry",
        "GeoJsonMultiLineStringGeometry",
        "GeoJsonMultiPointGeometry",
        "GeoJsonMultiPolygonGeometry",
        "GeoJsonPointGeometry",
        "GeoJsonPolygonGeometry",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = RyhtiGeometryGeometry.model_construct()
        error_messages = []
        match = 0
        # validate data type: GeoJsonPointGeometry
        if not isinstance(v, GeoJsonPointGeometry):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `GeoJsonPointGeometry`"
            )
        else:
            match += 1
        # validate data type: GeoJsonMultiPointGeometry
        if not isinstance(v, GeoJsonMultiPointGeometry):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `GeoJsonMultiPointGeometry`"
            )
        else:
            match += 1
        # validate data type: GeoJsonLineStringGeometry
        if not isinstance(v, GeoJsonLineStringGeometry):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `GeoJsonLineStringGeometry`"
            )
        else:
            match += 1
        # validate data type: GeoJsonMultiLineStringGeometry
        if not isinstance(v, GeoJsonMultiLineStringGeometry):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `GeoJsonMultiLineStringGeometry`"
            )
        else:
            match += 1
        # validate data type: GeoJsonPolygonGeometry
        if not isinstance(v, GeoJsonPolygonGeometry):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `GeoJsonPolygonGeometry`"
            )
        else:
            match += 1
        # validate data type: GeoJsonMultiPolygonGeometry
        if not isinstance(v, GeoJsonMultiPolygonGeometry):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `GeoJsonMultiPolygonGeometry`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in RyhtiGeometryGeometry with oneOf schemas: GeoJsonLineStringGeometry, GeoJsonMultiLineStringGeometry, GeoJsonMultiPointGeometry, GeoJsonMultiPolygonGeometry, GeoJsonPointGeometry, GeoJsonPolygonGeometry. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in RyhtiGeometryGeometry with oneOf schemas: GeoJsonLineStringGeometry, GeoJsonMultiLineStringGeometry, GeoJsonMultiPointGeometry, GeoJsonMultiPolygonGeometry, GeoJsonPointGeometry, GeoJsonPolygonGeometry. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GeoJsonPointGeometry
        try:
            instance.actual_instance = GeoJsonPointGeometry.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoJsonMultiPointGeometry
        try:
            instance.actual_instance = GeoJsonMultiPointGeometry.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoJsonLineStringGeometry
        try:
            instance.actual_instance = GeoJsonLineStringGeometry.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoJsonMultiLineStringGeometry
        try:
            instance.actual_instance = GeoJsonMultiLineStringGeometry.from_json(
                json_str
            )
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoJsonPolygonGeometry
        try:
            instance.actual_instance = GeoJsonPolygonGeometry.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoJsonMultiPolygonGeometry
        try:
            instance.actual_instance = GeoJsonMultiPolygonGeometry.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into RyhtiGeometryGeometry with oneOf schemas: GeoJsonLineStringGeometry, GeoJsonMultiLineStringGeometry, GeoJsonMultiPointGeometry, GeoJsonMultiPolygonGeometry, GeoJsonPointGeometry, GeoJsonPolygonGeometry. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into RyhtiGeometryGeometry with oneOf schemas: GeoJsonLineStringGeometry, GeoJsonMultiLineStringGeometry, GeoJsonMultiPointGeometry, GeoJsonMultiPolygonGeometry, GeoJsonPointGeometry, GeoJsonPolygonGeometry. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            GeoJsonLineStringGeometry,
            GeoJsonMultiLineStringGeometry,
            GeoJsonMultiPointGeometry,
            GeoJsonMultiPolygonGeometry,
            GeoJsonPointGeometry,
            GeoJsonPolygonGeometry,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

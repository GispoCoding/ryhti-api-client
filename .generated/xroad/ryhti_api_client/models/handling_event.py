# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.plan_attachment_document import PlanAttachmentDocument
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from typing import Set
from typing_extensions import Self


class HandlingEvent(BaseModel):
    """
    Käsittelytapahtuma
    """  # noqa: E501

    handling_event_key: StrictStr = Field(
        description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus",
        alias="handlingEventKey",
    )
    handling_event_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/handlingevent/{guid})",
        alias="handlingEventUri",
    )
    handling_event_type: StrictStr = Field(
        description='Käsittelytapahtuman tyyppi. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/kaavakastap">http://uri.suomi.fi/codelist/rytj/kaavakastap</a>',
        alias="handlingEventType",
    )
    event_time: Optional[date] = Field(default=None, alias="eventTime")
    name: Optional[LanguageString] = Field(
        default=None,
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.",
    )
    description: Optional[LanguageString] = Field(
        default=None,
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.",
    )
    location: Optional[RyhtiGeometry] = Field(
        default=None, description="Käsittelytapahtuman sijainti"
    )
    additional_information_link: Optional[StrictStr] = Field(
        default=None, alias="additionalInformationLink"
    )
    cancelled: Optional[StrictBool] = None
    related_documents: Optional[List[PlanAttachmentDocument]] = Field(
        default=None, alias="relatedDocuments"
    )
    __properties: ClassVar[List[str]] = [
        "handlingEventKey",
        "handlingEventUri",
        "handlingEventType",
        "eventTime",
        "name",
        "description",
        "location",
        "additionalInformationLink",
        "cancelled",
        "relatedDocuments",
    ]

    @field_validator("handling_event_type")
    def handling_event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/01",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/02",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/03",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/04",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/05",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/06",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/07",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/08",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/09",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/10",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/11",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/12",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/13",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/14",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/15",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/16",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/17",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/18",
                "http://uri.suomi.fi/codelist/rytj/kaavakastap/code/19",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/kaavakastap/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/17', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/18', 'http://uri.suomi.fi/codelist/rytj/kaavakastap/code/19')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HandlingEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "handling_event_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict["description"] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict["location"] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in related_documents (list)
        _items = []
        if self.related_documents:
            for _item_related_documents in self.related_documents:
                if _item_related_documents:
                    _items.append(_item_related_documents.to_dict())
            _dict["relatedDocuments"] = _items
        # set to None if event_time (nullable) is None
        # and model_fields_set contains the field
        if self.event_time is None and "event_time" in self.model_fields_set:
            _dict["eventTime"] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict["location"] = None

        # set to None if additional_information_link (nullable) is None
        # and model_fields_set contains the field
        if (
            self.additional_information_link is None
            and "additional_information_link" in self.model_fields_set
        ):
            _dict["additionalInformationLink"] = None

        # set to None if cancelled (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled is None and "cancelled" in self.model_fields_set:
            _dict["cancelled"] = None

        # set to None if related_documents (nullable) is None
        # and model_fields_set contains the field
        if (
            self.related_documents is None
            and "related_documents" in self.model_fields_set
        ):
            _dict["relatedDocuments"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HandlingEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "handlingEventKey": obj.get("handlingEventKey"),
                "handlingEventUri": obj.get("handlingEventUri"),
                "handlingEventType": obj.get("handlingEventType"),
                "eventTime": obj.get("eventTime"),
                "name": LanguageString.from_dict(obj["name"])
                if obj.get("name") is not None
                else None,
                "description": LanguageString.from_dict(obj["description"])
                if obj.get("description") is not None
                else None,
                "location": RyhtiGeometry.from_dict(obj["location"])
                if obj.get("location") is not None
                else None,
                "additionalInformationLink": obj.get("additionalInformationLink"),
                "cancelled": obj.get("cancelled"),
                "relatedDocuments": [
                    PlanAttachmentDocument.from_dict(_item)
                    for _item in obj["relatedDocuments"]
                ]
                if obj.get("relatedDocuments") is not None
                else None,
            }
        )
        return _obj

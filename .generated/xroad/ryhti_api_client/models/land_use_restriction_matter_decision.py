# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.land_use_restriction import LandUseRestriction
from ryhti_api_client.models.land_use_restriction_attachment_document import (
    LandUseRestrictionAttachmentDocument,
)
from ryhti_api_client.models.land_use_restriction_operator import (
    LandUseRestrictionOperator,
)
from ryhti_api_client.models.statute import Statute
from typing import Set
from typing_extensions import Self


class LandUseRestrictionMatterDecision(BaseModel):
    """
    LandUseRestrictionMatterDecision
    """  # noqa: E501

    land_use_restriction_matter_decision_key: StrictStr = Field(
        description="Avain", alias="landUseRestrictionMatterDecisionKey"
    )
    land_use_restriction_matter_decision_uri: Optional[StrictStr] = Field(
        default=None, alias="landUseRestrictionMatterDecisionUri"
    )
    decision_date: date = Field(description="Päätöspäivämäärä", alias="decisionDate")
    date_of_decision: date = Field(
        description="Päätöksenantopäivämäärä", alias="dateOfDecision"
    )
    date_of_validity: date = Field(
        description="Lainvoimaisuuspäivämäärä", alias="dateOfValidity"
    )
    decision_documents: Annotated[
        List[LandUseRestrictionAttachmentDocument], Field(min_length=1)
    ] = Field(description="Päätösasiakirjat", alias="decisionDocuments")
    decision_maker: LandUseRestrictionOperator = Field(
        description="Päätöksentekijä", alias="decisionMaker"
    )
    name: StrictStr = Field(
        description='Päätöksen nimitys, joka kertoo mitä päätös koskee. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi">http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi</a>'
    )
    type_of_decision_maker: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description='Päättäjän laji. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/PaatoksenTekija">http://uri.suomi.fi/codelist/rytj/PaatoksenTekija</a>',
        alias="typeOfDecisionMaker",
    )
    decision_identifier: Optional[StrictStr] = Field(
        default=None, description="Päätöstunnus", alias="decisionIdentifier"
    )
    statute: Optional[Statute] = Field(default=None, description="Ohjaava säädös")
    land_use_restriction: Optional[LandUseRestriction] = Field(
        default=None, description="Alueidenkäytön rajoitus", alias="landUseRestriction"
    )
    __properties: ClassVar[List[str]] = [
        "landUseRestrictionMatterDecisionKey",
        "landUseRestrictionMatterDecisionUri",
        "decisionDate",
        "dateOfDecision",
        "dateOfValidity",
        "decisionDocuments",
        "decisionMaker",
        "name",
        "typeOfDecisionMaker",
        "decisionIdentifier",
        "statute",
        "landUseRestriction",
    ]

    @field_validator("name")
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/01",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0101",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/02",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0201",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/03",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0301",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0302",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0303",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0304",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/04",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0401",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0402",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0403",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0404",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0405",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0406",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/05",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0501",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/06",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0601",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/07",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0701",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0702",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0703",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0704",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0705",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0706",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0707",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0708",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0709",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0710",
                "http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0102",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/01', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0101', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/02', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0201', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/03', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0301', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0302', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0303', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0304', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/04', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0401', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0402', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0403', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0404', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0405', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0406', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/05', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0501', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/06', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0601', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/07', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0701', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0702', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0703', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0704', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0705', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0706', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0707', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0708', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0709', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0710', 'http://uri.suomi.fi/codelist/rytj/AlueidenkayttopaatoksenNimi/code/0102')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LandUseRestrictionMatterDecision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "land_use_restriction_matter_decision_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in decision_documents (list)
        _items = []
        if self.decision_documents:
            for _item_decision_documents in self.decision_documents:
                if _item_decision_documents:
                    _items.append(_item_decision_documents.to_dict())
            _dict["decisionDocuments"] = _items
        # override the default output from pydantic by calling `to_dict()` of decision_maker
        if self.decision_maker:
            _dict["decisionMaker"] = self.decision_maker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statute
        if self.statute:
            _dict["statute"] = self.statute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of land_use_restriction
        if self.land_use_restriction:
            _dict["landUseRestriction"] = self.land_use_restriction.to_dict()
        # set to None if decision_identifier (nullable) is None
        # and model_fields_set contains the field
        if (
            self.decision_identifier is None
            and "decision_identifier" in self.model_fields_set
        ):
            _dict["decisionIdentifier"] = None

        # set to None if statute (nullable) is None
        # and model_fields_set contains the field
        if self.statute is None and "statute" in self.model_fields_set:
            _dict["statute"] = None

        # set to None if land_use_restriction (nullable) is None
        # and model_fields_set contains the field
        if (
            self.land_use_restriction is None
            and "land_use_restriction" in self.model_fields_set
        ):
            _dict["landUseRestriction"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LandUseRestrictionMatterDecision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "landUseRestrictionMatterDecisionKey": obj.get(
                    "landUseRestrictionMatterDecisionKey"
                ),
                "landUseRestrictionMatterDecisionUri": obj.get(
                    "landUseRestrictionMatterDecisionUri"
                ),
                "decisionDate": obj.get("decisionDate"),
                "dateOfDecision": obj.get("dateOfDecision"),
                "dateOfValidity": obj.get("dateOfValidity"),
                "decisionDocuments": [
                    LandUseRestrictionAttachmentDocument.from_dict(_item)
                    for _item in obj["decisionDocuments"]
                ]
                if obj.get("decisionDocuments") is not None
                else None,
                "decisionMaker": LandUseRestrictionOperator.from_dict(
                    obj["decisionMaker"]
                )
                if obj.get("decisionMaker") is not None
                else None,
                "name": obj.get("name"),
                "typeOfDecisionMaker": obj.get("typeOfDecisionMaker"),
                "decisionIdentifier": obj.get("decisionIdentifier"),
                "statute": Statute.from_dict(obj["statute"])
                if obj.get("statute") is not None
                else None,
                "landUseRestriction": LandUseRestriction.from_dict(
                    obj["landUseRestriction"]
                )
                if obj.get("landUseRestriction") is not None
                else None,
            }
        )
        return _obj

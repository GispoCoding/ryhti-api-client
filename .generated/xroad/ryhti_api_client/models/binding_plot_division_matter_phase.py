# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.binding_plot_division import BindingPlotDivision
from ryhti_api_client.models.binding_plot_division_matter_decision import (
    BindingPlotDivisionMatterDecision,
)
from typing import Set
from typing_extensions import Self


class BindingPlotDivisionMatterPhase(BaseModel):
    """
    BindingPlotDivisionMatterPhase
    """  # noqa: E501

    life_cycle_status: StrictStr = Field(
        description='Tonttijakosuunnitelman elinkaaren tila. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila">http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila</a>',
        alias="lifeCycleStatus",
    )
    binding_plot_division_matter_phase_key: StrictStr = Field(
        description="Sitovan tonttijaon asian vaihe avain",
        alias="bindingPlotDivisionMatterPhaseKey",
    )
    binding_plot_division_matter_phase_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/bindingplotdivisionmatterphase/{guid})",
        alias="bindingPlotDivisionMatterPhaseUri",
    )
    decision: Optional[BindingPlotDivisionMatterDecision] = Field(
        default=None, description="Päätös"
    )
    approved_plan_decision_uri: Optional[StrictStr] = Field(
        default=None,
        description="Viittaustunnus (https://uri.rakennetunymparistontietojarjestelma.fi/plandecision/{plandecisionkey}) hyväksytyn kaavan päätökseen.",
        alias="approvedPlanDecisionUri",
    )
    binding_plot_division: Optional[BindingPlotDivision] = Field(
        default=None, description="Sitova tonttijako", alias="bindingPlotDivision"
    )
    __properties: ClassVar[List[str]] = [
        "lifeCycleStatus",
        "bindingPlotDivisionMatterPhaseKey",
        "bindingPlotDivisionMatterPhaseUri",
        "decision",
        "approvedPlanDecisionUri",
        "bindingPlotDivision",
    ]

    @field_validator("life_cycle_status")
    def life_cycle_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/01",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/02",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/03",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/04",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/05",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/08",
                "http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/09",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/01', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/02', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/03', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/04', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/05', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/08', 'http://uri.suomi.fi/codelist/rytj/sitovanTonttijaonElinkaarenTila/code/09')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BindingPlotDivisionMatterPhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "binding_plot_division_matter_phase_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of decision
        if self.decision:
            _dict["decision"] = self.decision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of binding_plot_division
        if self.binding_plot_division:
            _dict["bindingPlotDivision"] = self.binding_plot_division.to_dict()
        # set to None if decision (nullable) is None
        # and model_fields_set contains the field
        if self.decision is None and "decision" in self.model_fields_set:
            _dict["decision"] = None

        # set to None if approved_plan_decision_uri (nullable) is None
        # and model_fields_set contains the field
        if (
            self.approved_plan_decision_uri is None
            and "approved_plan_decision_uri" in self.model_fields_set
        ):
            _dict["approvedPlanDecisionUri"] = None

        # set to None if binding_plot_division (nullable) is None
        # and model_fields_set contains the field
        if (
            self.binding_plot_division is None
            and "binding_plot_division" in self.model_fields_set
        ):
            _dict["bindingPlotDivision"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BindingPlotDivisionMatterPhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "lifeCycleStatus": obj.get("lifeCycleStatus"),
                "bindingPlotDivisionMatterPhaseKey": obj.get(
                    "bindingPlotDivisionMatterPhaseKey"
                ),
                "bindingPlotDivisionMatterPhaseUri": obj.get(
                    "bindingPlotDivisionMatterPhaseUri"
                ),
                "decision": BindingPlotDivisionMatterDecision.from_dict(obj["decision"])
                if obj.get("decision") is not None
                else None,
                "approvedPlanDecisionUri": obj.get("approvedPlanDecisionUri"),
                "bindingPlotDivision": BindingPlotDivision.from_dict(
                    obj["bindingPlotDivision"]
                )
                if obj.get("bindingPlotDivision") is not None
                else None,
            }
        )
        return _obj

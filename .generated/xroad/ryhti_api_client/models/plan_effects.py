# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.related_plot_division_plot import RelatedPlotDivisionPlot
from typing import Optional, Set
from typing_extensions import Self

class PlanEffects(BaseModel):
    """
    KaavanVaikutukset
    """ # noqa: E501
    type: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Kaavan vaikutuksen laji. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/kaavanVaikutuksenLaji\">http://uri.suomi.fi/codelist/rytj/kaavanVaikutuksenLaji</a>")
    binding_plot_division_uri: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Viittaustunnus (https://uri.rakennetunymparistontietojarjestelma.fi/bindingplotdivision/{bindingplotdivisionkey}) sitovaan tonttijakoon.", alias="bindingPlotDivisionUri")
    fully_included: Optional[StrictBool] = Field(default=None, description="Jos arvo on true, kaavan vaikutus kohdistuu sitovaan tonttijakoon kokonaisuudessaan, muuten tonttijakotontti kohtaisesti.", alias="fullyIncluded")
    related_plot_division_plots: Annotated[List[RelatedPlotDivisionPlot], Field(min_length=1)] = Field(description="Tonttijakotontin yksilöivätunnus, jota vaikutus koskee.", alias="relatedPlotDivisionPlots")
    __properties: ClassVar[List[str]] = ["type", "bindingPlotDivisionUri", "fullyIncluded", "relatedPlotDivisionPlots"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanEffects from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in related_plot_division_plots (list)
        _items = []
        if self.related_plot_division_plots:
            for _item_related_plot_division_plots in self.related_plot_division_plots:
                if _item_related_plot_division_plots:
                    _items.append(_item_related_plot_division_plots.to_dict())
            _dict['relatedPlotDivisionPlots'] = _items
        # set to None if fully_included (nullable) is None
        # and model_fields_set contains the field
        if self.fully_included is None and "fully_included" in self.model_fields_set:
            _dict['fullyIncluded'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanEffects from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "bindingPlotDivisionUri": obj.get("bindingPlotDivisionUri"),
            "fullyIncluded": obj.get("fullyIncluded"),
            "relatedPlotDivisionPlots": [RelatedPlotDivisionPlot.from_dict(_item) for _item in obj["relatedPlotDivisionPlots"]] if obj.get("relatedPlotDivisionPlots") is not None else None
        })
        return _obj



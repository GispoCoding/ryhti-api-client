# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.plan import Plan
from ryhti_api_client.models.plan_attachment_document import PlanAttachmentDocument
from ryhti_api_client.models.plan_cancellation_info import PlanCancellationInfo
from ryhti_api_client.models.plan_operator import PlanOperator
from ryhti_api_client.models.statute import Statute
from typing import Optional, Set
from typing_extensions import Self

class PlanDecision(BaseModel):
    """
    Kaavapäätös
    """ # noqa: E501
    plan_decision_key: StrictStr = Field(description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus", alias="planDecisionKey")
    plan_decision_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/plandecision/{guid})", alias="planDecisionUri")
    name: StrictStr = Field(description="Päätöksen nimitys, joka kertoo mitä päätös koskee. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/kaavpaatnimi\">http://uri.suomi.fi/codelist/rytj/kaavpaatnimi</a>")
    decision_date: date = Field(description="Päätöspäivämäärä", alias="decisionDate")
    date_of_decision: date = Field(description="Päätöksenantopäivämäärä", alias="dateOfDecision")
    decision_documents: Optional[List[PlanAttachmentDocument]] = Field(default=None, description="Päätösasiakirja", alias="decisionDocuments")
    decision_article: Optional[LanguageString] = Field(default=None, description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.", alias="decisionArticle")
    decision_text: Optional[LanguageString] = Field(default=None, description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.", alias="decisionText")
    type_of_decision_maker: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Päätöksen tekijä, monijäseninen toimielin tai viranhaltija. Käytetään koodistoa <a href=\"http://uri.suomi.fi/codelist/rytj/PaatoksenTekija\">http://uri.suomi.fi/codelist/rytj/PaatoksenTekija</a>", alias="typeOfDecisionMaker")
    decision_identifier: Optional[StrictStr] = Field(default=None, description="Päätöstunnus", alias="decisionIdentifier")
    statutes: Optional[List[Statute]] = Field(default=None, description="Ohjaava säädös")
    plans: Optional[List[Plan]] = Field(default=None, description="Kaavapäätökset")
    date_of_validity: Optional[date] = Field(default=None, description="Lainvoimaisuuspäivämäärä", alias="dateOfValidity")
    decision_makers: Optional[List[PlanOperator]] = Field(default=None, description="Päätöksentekijä", alias="decisionMakers")
    plan_cancellation_infos: Optional[List[PlanCancellationInfo]] = Field(default=None, description="Kumoamistieto", alias="planCancellationInfos")
    __properties: ClassVar[List[str]] = ["planDecisionKey", "planDecisionUri", "name", "decisionDate", "dateOfDecision", "decisionDocuments", "decisionArticle", "decisionText", "typeOfDecisionMaker", "decisionIdentifier", "statutes", "plans", "dateOfValidity", "decisionMakers", "planCancellationInfos"]

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/11A', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/11B', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/17']):
            raise ValueError("must be one of enum values ('http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/11A', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/11B', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavpaatnimi/code/17')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanDecision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "plan_decision_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in decision_documents (list)
        _items = []
        if self.decision_documents:
            for _item_decision_documents in self.decision_documents:
                if _item_decision_documents:
                    _items.append(_item_decision_documents.to_dict())
            _dict['decisionDocuments'] = _items
        # override the default output from pydantic by calling `to_dict()` of decision_article
        if self.decision_article:
            _dict['decisionArticle'] = self.decision_article.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decision_text
        if self.decision_text:
            _dict['decisionText'] = self.decision_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statutes (list)
        _items = []
        if self.statutes:
            for _item_statutes in self.statutes:
                if _item_statutes:
                    _items.append(_item_statutes.to_dict())
            _dict['statutes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plans (list)
        _items = []
        if self.plans:
            for _item_plans in self.plans:
                if _item_plans:
                    _items.append(_item_plans.to_dict())
            _dict['plans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in decision_makers (list)
        _items = []
        if self.decision_makers:
            for _item_decision_makers in self.decision_makers:
                if _item_decision_makers:
                    _items.append(_item_decision_makers.to_dict())
            _dict['decisionMakers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_cancellation_infos (list)
        _items = []
        if self.plan_cancellation_infos:
            for _item_plan_cancellation_infos in self.plan_cancellation_infos:
                if _item_plan_cancellation_infos:
                    _items.append(_item_plan_cancellation_infos.to_dict())
            _dict['planCancellationInfos'] = _items
        # set to None if decision_documents (nullable) is None
        # and model_fields_set contains the field
        if self.decision_documents is None and "decision_documents" in self.model_fields_set:
            _dict['decisionDocuments'] = None

        # set to None if decision_article (nullable) is None
        # and model_fields_set contains the field
        if self.decision_article is None and "decision_article" in self.model_fields_set:
            _dict['decisionArticle'] = None

        # set to None if decision_text (nullable) is None
        # and model_fields_set contains the field
        if self.decision_text is None and "decision_text" in self.model_fields_set:
            _dict['decisionText'] = None

        # set to None if decision_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.decision_identifier is None and "decision_identifier" in self.model_fields_set:
            _dict['decisionIdentifier'] = None

        # set to None if statutes (nullable) is None
        # and model_fields_set contains the field
        if self.statutes is None and "statutes" in self.model_fields_set:
            _dict['statutes'] = None

        # set to None if plans (nullable) is None
        # and model_fields_set contains the field
        if self.plans is None and "plans" in self.model_fields_set:
            _dict['plans'] = None

        # set to None if date_of_validity (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_validity is None and "date_of_validity" in self.model_fields_set:
            _dict['dateOfValidity'] = None

        # set to None if decision_makers (nullable) is None
        # and model_fields_set contains the field
        if self.decision_makers is None and "decision_makers" in self.model_fields_set:
            _dict['decisionMakers'] = None

        # set to None if plan_cancellation_infos (nullable) is None
        # and model_fields_set contains the field
        if self.plan_cancellation_infos is None and "plan_cancellation_infos" in self.model_fields_set:
            _dict['planCancellationInfos'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanDecision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planDecisionKey": obj.get("planDecisionKey"),
            "planDecisionUri": obj.get("planDecisionUri"),
            "name": obj.get("name"),
            "decisionDate": obj.get("decisionDate"),
            "dateOfDecision": obj.get("dateOfDecision"),
            "decisionDocuments": [PlanAttachmentDocument.from_dict(_item) for _item in obj["decisionDocuments"]] if obj.get("decisionDocuments") is not None else None,
            "decisionArticle": LanguageString.from_dict(obj["decisionArticle"]) if obj.get("decisionArticle") is not None else None,
            "decisionText": LanguageString.from_dict(obj["decisionText"]) if obj.get("decisionText") is not None else None,
            "typeOfDecisionMaker": obj.get("typeOfDecisionMaker"),
            "decisionIdentifier": obj.get("decisionIdentifier"),
            "statutes": [Statute.from_dict(_item) for _item in obj["statutes"]] if obj.get("statutes") is not None else None,
            "plans": [Plan.from_dict(_item) for _item in obj["plans"]] if obj.get("plans") is not None else None,
            "dateOfValidity": obj.get("dateOfValidity"),
            "decisionMakers": [PlanOperator.from_dict(_item) for _item in obj["decisionMakers"]] if obj.get("decisionMakers") is not None else None,
            "planCancellationInfos": [PlanCancellationInfo.from_dict(_item) for _item in obj["planCancellationInfos"]] if obj.get("planCancellationInfos") is not None else None
        })
        return _obj



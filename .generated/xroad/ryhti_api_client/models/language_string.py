# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class LanguageString(BaseModel):
    """
    Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.
    """  # noqa: E501

    fin: Optional[StrictStr] = Field(default=None, description="suomi")
    swe: Optional[StrictStr] = Field(default=None, description="ruotsi")
    smn: Optional[StrictStr] = Field(default=None, description="inarinsaame")
    sms: Optional[StrictStr] = Field(default=None, description="koltansaame")
    sme: Optional[StrictStr] = Field(default=None, description="pohjoissaame")
    eng: Optional[StrictStr] = Field(default=None, description="englanti")
    __properties: ClassVar[List[str]] = ["fin", "swe", "smn", "sms", "sme", "eng"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LanguageString from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fin (nullable) is None
        # and model_fields_set contains the field
        if self.fin is None and "fin" in self.model_fields_set:
            _dict["fin"] = None

        # set to None if swe (nullable) is None
        # and model_fields_set contains the field
        if self.swe is None and "swe" in self.model_fields_set:
            _dict["swe"] = None

        # set to None if smn (nullable) is None
        # and model_fields_set contains the field
        if self.smn is None and "smn" in self.model_fields_set:
            _dict["smn"] = None

        # set to None if sms (nullable) is None
        # and model_fields_set contains the field
        if self.sms is None and "sms" in self.model_fields_set:
            _dict["sms"] = None

        # set to None if sme (nullable) is None
        # and model_fields_set contains the field
        if self.sme is None and "sme" in self.model_fields_set:
            _dict["sme"] = None

        # set to None if eng (nullable) is None
        # and model_fields_set contains the field
        if self.eng is None and "eng" in self.model_fields_set:
            _dict["eng"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LanguageString from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "fin": obj.get("fin"),
                "swe": obj.get("swe"),
                "smn": obj.get("smn"),
                "sms": obj.get("sms"),
                "sme": obj.get("sme"),
                "eng": obj.get("eng"),
            }
        )
        return _obj

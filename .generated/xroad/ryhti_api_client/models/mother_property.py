# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.positive_numeric_value import PositiveNumericValue
from typing import Set
from typing_extensions import Self


class MotherProperty(BaseModel):
    """
    Muodostajakiinteistö
    """  # noqa: E501

    property_identifier: Optional[Annotated[str, Field(min_length=3, strict=True)]] = (
        Field(default=None, description="Kiinteistötunnus", alias="propertyIdentifier")
    )
    unseparated_parcel_identifier: Optional[StrictStr] = Field(
        default=None, description="Määräalatunnus", alias="unseparatedParcelIdentifier"
    )
    contained_area: PositiveNumericValue = Field(
        description="Positiivinen numeerinen arvo", alias="containedArea"
    )
    fully_included: StrictBool = Field(
        description="Sisältyy kokonaan", alias="fullyIncluded"
    )
    __properties: ClassVar[List[str]] = [
        "propertyIdentifier",
        "unseparatedParcelIdentifier",
        "containedArea",
        "fullyIncluded",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MotherProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contained_area
        if self.contained_area:
            _dict["containedArea"] = self.contained_area.to_dict()
        # set to None if property_identifier (nullable) is None
        # and model_fields_set contains the field
        if (
            self.property_identifier is None
            and "property_identifier" in self.model_fields_set
        ):
            _dict["propertyIdentifier"] = None

        # set to None if unseparated_parcel_identifier (nullable) is None
        # and model_fields_set contains the field
        if (
            self.unseparated_parcel_identifier is None
            and "unseparated_parcel_identifier" in self.model_fields_set
        ):
            _dict["unseparatedParcelIdentifier"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MotherProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "propertyIdentifier": obj.get("propertyIdentifier"),
                "unseparatedParcelIdentifier": obj.get("unseparatedParcelIdentifier"),
                "containedArea": PositiveNumericValue.from_dict(obj["containedArea"])
                if obj.get("containedArea") is not None
                else None,
                "fullyIncluded": obj.get("fullyIncluded"),
            }
        )
        return _obj

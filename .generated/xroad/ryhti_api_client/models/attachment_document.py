# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.descriptor import Descriptor
from ryhti_api_client.models.language_string import LanguageString
from typing import Set
from typing_extensions import Self


class AttachmentDocument(BaseModel):
    """
    Liiteasiakirja (base)
    """  # noqa: E501

    attachment_document_key: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus",
        alias="attachmentDocumentKey",
    )
    document_identifier: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="Asiakirjan pysyvä tunnus, esim. diaarinumero tai muu dokumentinhallinnan tunnus.",
        alias="documentIdentifier",
    )
    name: LanguageString = Field(
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli."
    )
    personal_data_content: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description='Kuvaa asiakirjan henkilötietosisällön. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/henkilotietosisalto">http://uri.suomi.fi/codelist/rytj/henkilotietosisalto</a>',
        alias="personalDataContent",
    )
    category_of_publicity: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description='Kuvaa asiakirjan julkisuusluokan. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/julkisuus">http://uri.suomi.fi/codelist/rytj/julkisuus</a>',
        alias="categoryOfPublicity",
    )
    accessibility: StrictBool
    retention_time: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description='Asiakirjan säilytysaika vuosina ennen sen hävittämistä. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/sailytysaika">http://uri.suomi.fi/codelist/rytj/sailytysaika</a>',
        alias="retentionTime",
    )
    confirmation_date: Optional[date] = Field(default=None, alias="confirmationDate")
    languages: Annotated[List[StrictStr], Field(min_length=1)] = Field(
        description='Asiakirjan kieli tai sisältämät kielet. Käytetään koodistoa <a href="http://uri.suomi.fi/codelist/rytj/ryhtikielet">http://uri.suomi.fi/codelist/rytj/ryhtikielet</a>'
    )
    file_key: StrictStr = Field(
        description="Erillisen rajapinnan kautta tallennetun tiedoston avain.",
        alias="fileKey",
    )
    descriptors: Optional[List[Descriptor]] = None
    document_date: date = Field(alias="documentDate")
    arrived_date: Optional[date] = Field(default=None, alias="arrivedDate")
    __properties: ClassVar[List[str]] = [
        "attachmentDocumentKey",
        "documentIdentifier",
        "name",
        "personalDataContent",
        "categoryOfPublicity",
        "accessibility",
        "retentionTime",
        "confirmationDate",
        "languages",
        "fileKey",
        "descriptors",
        "documentDate",
        "arrivedDate",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttachmentDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in descriptors (list)
        _items = []
        if self.descriptors:
            for _item_descriptors in self.descriptors:
                if _item_descriptors:
                    _items.append(_item_descriptors.to_dict())
            _dict["descriptors"] = _items
        # set to None if confirmation_date (nullable) is None
        # and model_fields_set contains the field
        if (
            self.confirmation_date is None
            and "confirmation_date" in self.model_fields_set
        ):
            _dict["confirmationDate"] = None

        # set to None if descriptors (nullable) is None
        # and model_fields_set contains the field
        if self.descriptors is None and "descriptors" in self.model_fields_set:
            _dict["descriptors"] = None

        # set to None if arrived_date (nullable) is None
        # and model_fields_set contains the field
        if self.arrived_date is None and "arrived_date" in self.model_fields_set:
            _dict["arrivedDate"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttachmentDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "attachmentDocumentKey": obj.get("attachmentDocumentKey"),
                "documentIdentifier": obj.get("documentIdentifier"),
                "name": LanguageString.from_dict(obj["name"])
                if obj.get("name") is not None
                else None,
                "personalDataContent": obj.get("personalDataContent"),
                "categoryOfPublicity": obj.get("categoryOfPublicity"),
                "accessibility": obj.get("accessibility"),
                "retentionTime": obj.get("retentionTime"),
                "confirmationDate": obj.get("confirmationDate"),
                "languages": obj.get("languages"),
                "fileKey": obj.get("fileKey"),
                "descriptors": [
                    Descriptor.from_dict(_item) for _item in obj["descriptors"]
                ]
                if obj.get("descriptors") is not None
                else None,
                "documentDate": obj.get("documentDate"),
                "arrivedDate": obj.get("arrivedDate"),
            }
        )
        return _obj

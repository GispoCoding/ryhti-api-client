# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.language_string import LanguageString
from typing import Optional, Set
from typing_extensions import Self

class Statute(BaseModel):
    """
    Säädösviite
    """ # noqa: E501
    name_of_statute: LanguageString = Field(description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.", alias="nameOfStatute")
    number_of_statute_collection: StrictInt = Field(alias="numberOfStatuteCollection")
    year_of_statute_collection: StrictInt = Field(alias="yearOfStatuteCollection")
    chapter: Optional[StrictInt] = Field(default=None, description="Luku")
    section: Optional[StrictInt] = Field(default=None, description="Pykälä")
    subsections: Optional[List[StrictInt]] = Field(default=None, description="Momentit")
    paragraphs: Optional[List[StrictInt]] = Field(default=None, description="Kohdat")
    subparagraphs: Optional[List[StrictStr]] = Field(default=None, description="Alakohdat")
    __properties: ClassVar[List[str]] = ["nameOfStatute", "numberOfStatuteCollection", "yearOfStatuteCollection", "chapter", "section", "subsections", "paragraphs", "subparagraphs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Statute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name_of_statute
        if self.name_of_statute:
            _dict['nameOfStatute'] = self.name_of_statute.to_dict()
        # set to None if chapter (nullable) is None
        # and model_fields_set contains the field
        if self.chapter is None and "chapter" in self.model_fields_set:
            _dict['chapter'] = None

        # set to None if section (nullable) is None
        # and model_fields_set contains the field
        if self.section is None and "section" in self.model_fields_set:
            _dict['section'] = None

        # set to None if subsections (nullable) is None
        # and model_fields_set contains the field
        if self.subsections is None and "subsections" in self.model_fields_set:
            _dict['subsections'] = None

        # set to None if paragraphs (nullable) is None
        # and model_fields_set contains the field
        if self.paragraphs is None and "paragraphs" in self.model_fields_set:
            _dict['paragraphs'] = None

        # set to None if subparagraphs (nullable) is None
        # and model_fields_set contains the field
        if self.subparagraphs is None and "subparagraphs" in self.model_fields_set:
            _dict['subparagraphs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Statute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nameOfStatute": LanguageString.from_dict(obj["nameOfStatute"]) if obj.get("nameOfStatute") is not None else None,
            "numberOfStatuteCollection": obj.get("numberOfStatuteCollection"),
            "yearOfStatuteCollection": obj.get("yearOfStatuteCollection"),
            "chapter": obj.get("chapter"),
            "section": obj.get("section"),
            "subsections": obj.get("subsections"),
            "paragraphs": obj.get("paragraphs"),
            "subparagraphs": obj.get("subparagraphs")
        })
        return _obj



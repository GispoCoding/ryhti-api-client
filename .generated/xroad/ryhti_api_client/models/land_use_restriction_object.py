# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.related_plan import RelatedPlan
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from typing import Optional, Set
from typing_extensions import Self

class LandUseRestrictionObject(BaseModel):
    """
    LandUseRestrictionObject
    """ # noqa: E501
    land_use_restriction_object_key: StrictStr = Field(description="Tiedon tuottajatahon tietojärjestelmän generoima kohteen versioriippumaton tunnus.", alias="landUseRestrictionObjectKey")
    land_use_restriction_object_uri: Optional[StrictStr] = Field(default=None, description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/landuserestrictionobject/{guid})", alias="landUseRestrictionObjectUri")
    related_properties: Optional[List[StrictStr]] = Field(default=None, description="Tieto liittyvistä kiinteistöistä, joita rajoitus koskee", alias="relatedProperties")
    related_plans: Optional[List[RelatedPlan]] = Field(default=None, description="Alueidenkäytön rajoituskohteen alueelle kohdistuvan kaavan pysyvä kaavatunnus", alias="relatedPlans")
    geometry: RyhtiGeometry = Field(description="Geometria-attribuutin arvon tulee olla alue, 3-ulotteinen kappale, monialue tai monikappale.")
    __properties: ClassVar[List[str]] = ["landUseRestrictionObjectKey", "landUseRestrictionObjectUri", "relatedProperties", "relatedPlans", "geometry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LandUseRestrictionObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "land_use_restriction_object_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in related_plans (list)
        _items = []
        if self.related_plans:
            for _item_related_plans in self.related_plans:
                if _item_related_plans:
                    _items.append(_item_related_plans.to_dict())
            _dict['relatedPlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # set to None if related_properties (nullable) is None
        # and model_fields_set contains the field
        if self.related_properties is None and "related_properties" in self.model_fields_set:
            _dict['relatedProperties'] = None

        # set to None if related_plans (nullable) is None
        # and model_fields_set contains the field
        if self.related_plans is None and "related_plans" in self.model_fields_set:
            _dict['relatedPlans'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LandUseRestrictionObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "landUseRestrictionObjectKey": obj.get("landUseRestrictionObjectKey"),
            "landUseRestrictionObjectUri": obj.get("landUseRestrictionObjectUri"),
            "relatedProperties": obj.get("relatedProperties"),
            "relatedPlans": [RelatedPlan.from_dict(_item) for _item in obj["relatedPlans"]] if obj.get("relatedPlans") is not None else None,
            "geometry": RyhtiGeometry.from_dict(obj["geometry"]) if obj.get("geometry") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Ryhti API

    Rakennetun ympäristön tietojärjestelmän rajapinta

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.land_use_restriction_object import LandUseRestrictionObject
from ryhti_api_client.models.time_period_date_only import TimePeriodDateOnly
from typing import Optional, Set
from typing_extensions import Self

class LandUseRestriction(BaseModel):
    """
    LandUseRestriction
    """ # noqa: E501
    land_use_restriction_key: StrictStr = Field(description="Avain", alias="landUseRestrictionKey")
    land_use_restriction_uri: Optional[StrictStr] = Field(default=None, alias="landUseRestrictionUri")
    period_of_validity: TimePeriodDateOnly = Field(description="Voimassaoloaika", alias="periodOfValidity")
    land_use_restriction_objects: Annotated[List[LandUseRestrictionObject], Field(min_length=1)] = Field(description="Alueidenkäytön rajoituskohde", alias="landUseRestrictionObjects")
    __properties: ClassVar[List[str]] = ["landUseRestrictionKey", "landUseRestrictionUri", "periodOfValidity", "landUseRestrictionObjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LandUseRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "land_use_restriction_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict['periodOfValidity'] = self.period_of_validity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in land_use_restriction_objects (list)
        _items = []
        if self.land_use_restriction_objects:
            for _item_land_use_restriction_objects in self.land_use_restriction_objects:
                if _item_land_use_restriction_objects:
                    _items.append(_item_land_use_restriction_objects.to_dict())
            _dict['landUseRestrictionObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LandUseRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "landUseRestrictionKey": obj.get("landUseRestrictionKey"),
            "landUseRestrictionUri": obj.get("landUseRestrictionUri"),
            "periodOfValidity": TimePeriodDateOnly.from_dict(obj["periodOfValidity"]) if obj.get("periodOfValidity") is not None else None,
            "landUseRestrictionObjects": [LandUseRestrictionObject.from_dict(_item) for _item in obj["landUseRestrictionObjects"]] if obj.get("landUseRestrictionObjects") is not None else None
        })
        return _obj



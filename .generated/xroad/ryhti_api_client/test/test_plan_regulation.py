# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ryhti_api_client.models.plan_regulation import PlanRegulation


class TestPlanRegulation(unittest.TestCase):
    """PlanRegulation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlanRegulation:
        """Test PlanRegulation
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `PlanRegulation`
        """
        model = PlanRegulation()
        if include_optional:
            return PlanRegulation(
                plan_regulation_key = '',
                plan_regulation_uri = '',
                value = None,
                life_cycle_status = 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01',
                type = 'http://uri.suomi.fi/codelist/rytj/RY_Kaavamaarayslaji/code/asumisenAlue',
                verbal_regulations = [
                    'http://uri.suomi.fi/codelist/rytj/RY_Sanallisen_Kaavamaarayksen_Laji/code/rakentamistapa'
                    ],
                additional_informations = [
                    ryhti_api_client.models.additional_information.AdditionalInformation(
                        type = 'http://uri.suomi.fi/codelist/rytj/RY_Kaavamaarayksen_Lisatiedonlaji/code/tyyppi', 
                        value = null, )
                    ],
                related_documents = [
                    ryhti_api_client.models.plan_attachment_document.PlanAttachmentDocument(
                        attachment_document_key = '0', 
                        document_identifier = '0', 
                        name = null, 
                        personal_data_content = '0', 
                        category_of_publicity = '0', 
                        accessibility = True, 
                        retention_time = '0', 
                        confirmation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        languages = [
                            ''
                            ], 
                        file_key = '', 
                        descriptors = [
                            ryhti_api_client.models.descriptor.Descriptor(
                                descriptor_identifier = '', 
                                vocabulary = '', 
                                descriptor = '', )
                            ], 
                        document_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        arrived_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        plan_attachment_document_uri = '', 
                        type_of_attachment = '0', 
                        document_specification = null, 
                        document_creator_operators = [
                            ryhti_api_client.models.plan_operator.PlanOperator(
                                plan_operator_key = '', 
                                plan_operator_uri = '', 
                                first_name = '', 
                                last_name = '', 
                                title = '', 
                                organization_name = '', 
                                business_id = '', )
                            ], 
                        related_plan_attachment_documents = [
                            ''
                            ], )
                    ],
                plan_themes = [
                    ''
                    ],
                period_of_validity = ryhti_api_client.models.time_period_date_only.TimePeriodDateOnly(
                    begin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                subject_identifiers = [
                    ''
                    ],
                regulation_number = ''
            )
        else:
            return PlanRegulation(
                plan_regulation_key = '',
                life_cycle_status = 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01',
                type = 'http://uri.suomi.fi/codelist/rytj/RY_Kaavamaarayslaji/code/asumisenAlue',
        )
        """

    def testPlanRegulation(self):
        """Test PlanRegulation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()

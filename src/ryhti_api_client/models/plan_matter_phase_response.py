# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.handling_event import HandlingEvent
from ryhti_api_client.models.interaction_event import InteractionEvent
from ryhti_api_client.models.plan_decision import PlanDecision
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from typing import Set
from typing_extensions import Self


class PlanMatterPhaseResponse(BaseModel):
    """
    PlanMatterPhaseResponse
    """  # noqa: E501

    plan_matter_phase_key: Optional[StrictStr] = Field(
        default=None, alias="planMatterPhaseKey"
    )
    plan_matter_phase_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/planmatterphase/{guid})",
        alias="planMatterPhaseUri",
    )
    life_cycle_status: Optional[StrictStr] = Field(
        default=None, alias="lifeCycleStatus"
    )
    geographical_area: Optional[RyhtiGeometry] = Field(
        default=None, alias="geographicalArea"
    )
    handling_event: Optional[HandlingEvent] = Field(
        default=None, description="Käsittelytapahtuma", alias="handlingEvent"
    )
    interaction_events: Optional[List[InteractionEvent]] = Field(
        default=None, alias="interactionEvents"
    )
    plan_decision: Optional[PlanDecision] = Field(
        default=None, description="Kaavapäätös", alias="planDecision"
    )
    previous_phase_key: Optional[StrictStr] = Field(
        default=None, alias="previousPhaseKey"
    )
    next_phase_key: Optional[StrictStr] = Field(default=None, alias="nextPhaseKey")
    __properties: ClassVar[List[str]] = [
        "planMatterPhaseKey",
        "planMatterPhaseUri",
        "lifeCycleStatus",
        "geographicalArea",
        "handlingEvent",
        "interactionEvents",
        "planDecision",
        "previousPhaseKey",
        "nextPhaseKey",
    ]

    @field_validator("life_cycle_status")
    def life_cycle_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16",
                "http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/01', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/02', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/03', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/04', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/05', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/06', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/07', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/08', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/09', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/10', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/11', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/12', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/13', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/14', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/15', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/16', 'http://uri.suomi.fi/codelist/rytj/kaavaelinkaari/code/17')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanMatterPhaseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "plan_matter_phase_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geographical_area
        if self.geographical_area:
            _dict["geographicalArea"] = self.geographical_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of handling_event
        if self.handling_event:
            _dict["handlingEvent"] = self.handling_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interaction_events (list)
        _items = []
        if self.interaction_events:
            for _item_interaction_events in self.interaction_events:
                if _item_interaction_events:
                    _items.append(_item_interaction_events.to_dict())
            _dict["interactionEvents"] = _items
        # override the default output from pydantic by calling `to_dict()` of plan_decision
        if self.plan_decision:
            _dict["planDecision"] = self.plan_decision.to_dict()
        # set to None if handling_event (nullable) is None
        # and model_fields_set contains the field
        if self.handling_event is None and "handling_event" in self.model_fields_set:
            _dict["handlingEvent"] = None

        # set to None if interaction_events (nullable) is None
        # and model_fields_set contains the field
        if (
            self.interaction_events is None
            and "interaction_events" in self.model_fields_set
        ):
            _dict["interactionEvents"] = None

        # set to None if plan_decision (nullable) is None
        # and model_fields_set contains the field
        if self.plan_decision is None and "plan_decision" in self.model_fields_set:
            _dict["planDecision"] = None

        # set to None if previous_phase_key (nullable) is None
        # and model_fields_set contains the field
        if (
            self.previous_phase_key is None
            and "previous_phase_key" in self.model_fields_set
        ):
            _dict["previousPhaseKey"] = None

        # set to None if next_phase_key (nullable) is None
        # and model_fields_set contains the field
        if self.next_phase_key is None and "next_phase_key" in self.model_fields_set:
            _dict["nextPhaseKey"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanMatterPhaseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "planMatterPhaseKey": obj.get("planMatterPhaseKey"),
                "planMatterPhaseUri": obj.get("planMatterPhaseUri"),
                "lifeCycleStatus": obj.get("lifeCycleStatus"),
                "geographicalArea": RyhtiGeometry.from_dict(obj["geographicalArea"])
                if obj.get("geographicalArea") is not None
                else None,
                "handlingEvent": HandlingEvent.from_dict(obj["handlingEvent"])
                if obj.get("handlingEvent") is not None
                else None,
                "interactionEvents": [
                    InteractionEvent.from_dict(_item)
                    for _item in obj["interactionEvents"]
                ]
                if obj.get("interactionEvents") is not None
                else None,
                "planDecision": PlanDecision.from_dict(obj["planDecision"])
                if obj.get("planDecision") is not None
                else None,
                "previousPhaseKey": obj.get("previousPhaseKey"),
                "nextPhaseKey": obj.get("nextPhaseKey"),
            }
        )
        return _obj

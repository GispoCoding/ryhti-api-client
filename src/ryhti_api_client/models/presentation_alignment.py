# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from typing import Set
from typing_extensions import Self


class PresentationAlignment(BaseModel):
    """
    PresentationAlignment
    """  # noqa: E501

    plan_object_key: StrictStr = Field(alias="planObjectKey")
    plan_regulation_group_key: StrictStr = Field(alias="planRegulationGroupKey")
    geometry: RyhtiGeometry
    rotation: Optional[StrictInt] = None
    language: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "planObjectKey",
        "planRegulationGroupKey",
        "geometry",
        "rotation",
        "language",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresentationAlignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict["geometry"] = self.geometry.to_dict()
        # set to None if rotation (nullable) is None
        # and model_fields_set contains the field
        if self.rotation is None and "rotation" in self.model_fields_set:
            _dict["rotation"] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict["language"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresentationAlignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "planObjectKey": obj.get("planObjectKey"),
                "planRegulationGroupKey": obj.get("planRegulationGroupKey"),
                "geometry": RyhtiGeometry.from_dict(obj["geometry"])
                if obj.get("geometry") is not None
                else None,
                "rotation": obj.get("rotation"),
                "language": obj.get("language"),
            }
        )
        return _obj

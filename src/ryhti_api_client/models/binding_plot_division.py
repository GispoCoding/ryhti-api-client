# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.access_to_road import AccessToRoad
from ryhti_api_client.models.binding_plot_division_cancellation_info import (
    BindingPlotDivisionCancellationInfo,
)
from ryhti_api_client.models.boundary_point import BoundaryPoint
from ryhti_api_client.models.plot_division_plot import PlotDivisionPlot
from ryhti_api_client.models.ryhti_geometry import RyhtiGeometry
from ryhti_api_client.models.time_period_date_only import TimePeriodDateOnly
from typing import Set
from typing_extensions import Self


class BindingPlotDivision(BaseModel):
    """
    Sitova tonttijako
    """  # noqa: E501

    binding_plot_division_key: StrictStr = Field(
        description="Sitova tonttijako avain", alias="bindingPlotDivisionKey"
    )
    binding_plot_division_uri: Optional[StrictStr] = Field(
        default=None,
        description="Luokan pysyvä URI -muotoinen viittaustunniste (https://uri.rakennetunymparistontietojarjestelma.fi/bindingplotdivision/{guid})",
        alias="bindingPlotDivisionUri",
    )
    binding_plot_division_cancellation_infos: Optional[
        List[BindingPlotDivisionCancellationInfo]
    ] = Field(
        default=None,
        description="Sitovan tonttijaon kumoutumistieto",
        alias="bindingPlotDivisionCancellationInfos",
    )
    plot_division_plots: Annotated[List[PlotDivisionPlot], Field(min_length=1)] = Field(
        description="Tonttijakotontit", alias="plotDivisionPlots"
    )
    period_of_validity: TimePeriodDateOnly = Field(
        description="Voimassaolo aika", alias="periodOfValidity"
    )
    geographical_area: RyhtiGeometry = Field(
        description="Aluerajaus", alias="geographicalArea"
    )
    boundary_points: Annotated[List[BoundaryPoint], Field(min_length=3)] = Field(
        description="Rajapisteet", alias="boundaryPoints"
    )
    accesses_to_road: Optional[List[AccessToRoad]] = Field(
        default=None, description="Kulkuhteydet", alias="accessesToRoad"
    )
    __properties: ClassVar[List[str]] = [
        "bindingPlotDivisionKey",
        "bindingPlotDivisionUri",
        "bindingPlotDivisionCancellationInfos",
        "plotDivisionPlots",
        "periodOfValidity",
        "geographicalArea",
        "boundaryPoints",
        "accessesToRoad",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BindingPlotDivision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "binding_plot_division_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in binding_plot_division_cancellation_infos (list)
        _items = []
        if self.binding_plot_division_cancellation_infos:
            for (
                _item_binding_plot_division_cancellation_infos
            ) in self.binding_plot_division_cancellation_infos:
                if _item_binding_plot_division_cancellation_infos:
                    _items.append(
                        _item_binding_plot_division_cancellation_infos.to_dict()
                    )
            _dict["bindingPlotDivisionCancellationInfos"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plot_division_plots (list)
        _items = []
        if self.plot_division_plots:
            for _item_plot_division_plots in self.plot_division_plots:
                if _item_plot_division_plots:
                    _items.append(_item_plot_division_plots.to_dict())
            _dict["plotDivisionPlots"] = _items
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict["periodOfValidity"] = self.period_of_validity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geographical_area
        if self.geographical_area:
            _dict["geographicalArea"] = self.geographical_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in boundary_points (list)
        _items = []
        if self.boundary_points:
            for _item_boundary_points in self.boundary_points:
                if _item_boundary_points:
                    _items.append(_item_boundary_points.to_dict())
            _dict["boundaryPoints"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in accesses_to_road (list)
        _items = []
        if self.accesses_to_road:
            for _item_accesses_to_road in self.accesses_to_road:
                if _item_accesses_to_road:
                    _items.append(_item_accesses_to_road.to_dict())
            _dict["accessesToRoad"] = _items
        # set to None if binding_plot_division_cancellation_infos (nullable) is None
        # and model_fields_set contains the field
        if (
            self.binding_plot_division_cancellation_infos is None
            and "binding_plot_division_cancellation_infos" in self.model_fields_set
        ):
            _dict["bindingPlotDivisionCancellationInfos"] = None

        # set to None if accesses_to_road (nullable) is None
        # and model_fields_set contains the field
        if (
            self.accesses_to_road is None
            and "accesses_to_road" in self.model_fields_set
        ):
            _dict["accessesToRoad"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BindingPlotDivision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "bindingPlotDivisionKey": obj.get("bindingPlotDivisionKey"),
                "bindingPlotDivisionUri": obj.get("bindingPlotDivisionUri"),
                "bindingPlotDivisionCancellationInfos": [
                    BindingPlotDivisionCancellationInfo.from_dict(_item)
                    for _item in obj["bindingPlotDivisionCancellationInfos"]
                ]
                if obj.get("bindingPlotDivisionCancellationInfos") is not None
                else None,
                "plotDivisionPlots": [
                    PlotDivisionPlot.from_dict(_item)
                    for _item in obj["plotDivisionPlots"]
                ]
                if obj.get("plotDivisionPlots") is not None
                else None,
                "periodOfValidity": TimePeriodDateOnly.from_dict(
                    obj["periodOfValidity"]
                )
                if obj.get("periodOfValidity") is not None
                else None,
                "geographicalArea": RyhtiGeometry.from_dict(obj["geographicalArea"])
                if obj.get("geographicalArea") is not None
                else None,
                "boundaryPoints": [
                    BoundaryPoint.from_dict(_item) for _item in obj["boundaryPoints"]
                ]
                if obj.get("boundaryPoints") is not None
                else None,
                "accessesToRoad": [
                    AccessToRoad.from_dict(_item) for _item in obj["accessesToRoad"]
                ]
                if obj.get("accessesToRoad") is not None
                else None,
            }
        )
        return _obj

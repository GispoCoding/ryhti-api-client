# coding: utf-8

"""
Ryhti API

Rakennetun ympäristön tietojärjestelmän rajapinta

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ryhti_api_client.models.building_ordinance_attachment_document import (
    BuildingOrdinanceAttachmentDocument,
)
from ryhti_api_client.models.language_string import LanguageString
from ryhti_api_client.models.time_period_date_only import TimePeriodDateOnly
from typing import Set
from typing_extensions import Self


class BuildingOrdinance(BaseModel):
    """
    BuildingOrdinance
    """  # noqa: E501

    permanent_building_ordinance_identifier: Annotated[
        str, Field(min_length=1, strict=True)
    ] = Field(
        description="Rakennusjärjestyksen pysyvä tunnus",
        alias="permanentBuildingOrdinanceIdentifier",
    )
    building_ordinance_uri: Optional[StrictStr] = Field(
        default=None, alias="buildingOrdinanceUri"
    )
    name: LanguageString = Field(
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli."
    )
    description: Optional[LanguageString] = Field(
        default=None,
        description="Lokalisoitu merkkijono-luokka eri kielille. Lisää vähintään yksi kieli.",
    )
    administrative_area_identifiers: Annotated[List[StrictStr], Field(max_length=1)] = (
        Field(
            description="Hallinnollisen alueen tunnus (kuntanumero), jota rakennusjärjestys koskee",
            alias="administrativeAreaIdentifiers",
        )
    )
    approval_date: date = Field(
        description="Rakennusjärjestyksen hyväksymispäivämäärä", alias="approvalDate"
    )
    period_of_validity: TimePeriodDateOnly = Field(
        description="Rakennusjärjestyksen voimassaoloaika", alias="periodOfValidity"
    )
    attachment_documents: Annotated[
        List[BuildingOrdinanceAttachmentDocument], Field(min_length=1)
    ] = Field(
        description="Rakennusjärjestys-liiteasiakirja tai siihen olennaisesti kuuluva liiteasiakirja",
        alias="attachmentDocuments",
    )
    __properties: ClassVar[List[str]] = [
        "permanentBuildingOrdinanceIdentifier",
        "buildingOrdinanceUri",
        "name",
        "description",
        "administrativeAreaIdentifiers",
        "approvalDate",
        "periodOfValidity",
        "attachmentDocuments",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildingOrdinance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "building_ordinance_uri",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict["description"] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict["periodOfValidity"] = self.period_of_validity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_documents (list)
        _items = []
        if self.attachment_documents:
            for _item_attachment_documents in self.attachment_documents:
                if _item_attachment_documents:
                    _items.append(_item_attachment_documents.to_dict())
            _dict["attachmentDocuments"] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildingOrdinance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "permanentBuildingOrdinanceIdentifier": obj.get(
                    "permanentBuildingOrdinanceIdentifier"
                ),
                "buildingOrdinanceUri": obj.get("buildingOrdinanceUri"),
                "name": LanguageString.from_dict(obj["name"])
                if obj.get("name") is not None
                else None,
                "description": LanguageString.from_dict(obj["description"])
                if obj.get("description") is not None
                else None,
                "administrativeAreaIdentifiers": obj.get(
                    "administrativeAreaIdentifiers"
                ),
                "approvalDate": obj.get("approvalDate"),
                "periodOfValidity": TimePeriodDateOnly.from_dict(
                    obj["periodOfValidity"]
                )
                if obj.get("periodOfValidity") is not None
                else None,
                "attachmentDocuments": [
                    BuildingOrdinanceAttachmentDocument.from_dict(_item)
                    for _item in obj["attachmentDocuments"]
                ]
                if obj.get("attachmentDocuments") is not None
                else None,
            }
        )
        return _obj
